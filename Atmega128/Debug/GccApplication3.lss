
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  00001430  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c4d  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e57  00000000  00000000  00003299  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e3c  00000000  00000000  000040f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  00004f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000705  00000000  00000000  00005310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001121  00000000  00000000  00005a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00006b36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	d5 c0       	rjmp	.+426    	; 0x1b0 <__bad_interrupt>
       6:	00 00       	nop
       8:	d3 c0       	rjmp	.+422    	; 0x1b0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d1 c0       	rjmp	.+418    	; 0x1b0 <__bad_interrupt>
       e:	00 00       	nop
      10:	cf c0       	rjmp	.+414    	; 0x1b0 <__bad_interrupt>
      12:	00 00       	nop
      14:	cd c0       	rjmp	.+410    	; 0x1b0 <__bad_interrupt>
      16:	00 00       	nop
      18:	cb c0       	rjmp	.+406    	; 0x1b0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c9 c0       	rjmp	.+402    	; 0x1b0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c7 c0       	rjmp	.+398    	; 0x1b0 <__bad_interrupt>
      22:	00 00       	nop
      24:	c5 c0       	rjmp	.+394    	; 0x1b0 <__bad_interrupt>
      26:	00 00       	nop
      28:	c3 c0       	rjmp	.+390    	; 0x1b0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c1 c0       	rjmp	.+386    	; 0x1b0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bf c0       	rjmp	.+382    	; 0x1b0 <__bad_interrupt>
      32:	00 00       	nop
      34:	bd c0       	rjmp	.+378    	; 0x1b0 <__bad_interrupt>
      36:	00 00       	nop
      38:	bb c0       	rjmp	.+374    	; 0x1b0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b9 c0       	rjmp	.+370    	; 0x1b0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b7 c0       	rjmp	.+366    	; 0x1b0 <__bad_interrupt>
      42:	00 00       	nop
      44:	b5 c0       	rjmp	.+362    	; 0x1b0 <__bad_interrupt>
      46:	00 00       	nop
      48:	b3 c0       	rjmp	.+358    	; 0x1b0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b1 c0       	rjmp	.+354    	; 0x1b0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	af c0       	rjmp	.+350    	; 0x1b0 <__bad_interrupt>
      52:	00 00       	nop
      54:	ad c0       	rjmp	.+346    	; 0x1b0 <__bad_interrupt>
      56:	00 00       	nop
      58:	ab c0       	rjmp	.+342    	; 0x1b0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a9 c0       	rjmp	.+338    	; 0x1b0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a7 c0       	rjmp	.+334    	; 0x1b0 <__bad_interrupt>
      62:	00 00       	nop
      64:	a5 c0       	rjmp	.+330    	; 0x1b0 <__bad_interrupt>
      66:	00 00       	nop
      68:	a3 c0       	rjmp	.+326    	; 0x1b0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a1 c0       	rjmp	.+322    	; 0x1b0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9f c0       	rjmp	.+318    	; 0x1b0 <__bad_interrupt>
      72:	00 00       	nop
      74:	9d c0       	rjmp	.+314    	; 0x1b0 <__bad_interrupt>
      76:	00 00       	nop
      78:	9b c0       	rjmp	.+310    	; 0x1b0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	99 c0       	rjmp	.+306    	; 0x1b0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	97 c0       	rjmp	.+302    	; 0x1b0 <__bad_interrupt>
      82:	00 00       	nop
      84:	95 c0       	rjmp	.+298    	; 0x1b0 <__bad_interrupt>
      86:	00 00       	nop
      88:	93 c0       	rjmp	.+294    	; 0x1b0 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2332>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e1       	ldi	r29, 0x10	; 16
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_clear_bss>:
     19a:	21 e0       	ldi	r18, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <.do_clear_bss_start>

000001a2 <.do_clear_bss_loop>:
     1a2:	1d 92       	st	X+, r1

000001a4 <.do_clear_bss_start>:
     1a4:	a1 31       	cpi	r26, 0x11	; 17
     1a6:	b2 07       	cpc	r27, r18
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <.do_clear_bss_loop>
     1aa:	3c d1       	rcall	.+632    	; 0x424 <main>
     1ac:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <_exit>

000001b0 <__bad_interrupt>:
     1b0:	27 cf       	rjmp	.-434    	; 0x0 <__vectors>

000001b2 <adc_init>:


/* adc 함수 초기 설정 */
void adc_init(void) 
{
	ADCSRA |= ((0<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)); //16Mhz/128 = 125Khz
     1b2:	86 b1       	in	r24, 0x06	; 6
     1b4:	83 60       	ori	r24, 0x03	; 3
     1b6:	86 b9       	out	0x06, r24	; 6
	
	ADMUX |= (1<<REFS0);       //AVCC(5V) 사용
     1b8:	87 b1       	in	r24, 0x07	; 7
     1ba:	80 64       	ori	r24, 0x40	; 64
     1bc:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1<<ADEN);      //ADC enable
     1be:	86 b1       	in	r24, 0x06	; 6
     1c0:	80 68       	ori	r24, 0x80	; 128
     1c2:	86 b9       	out	0x06, r24	; 6
     1c4:	08 95       	ret

000001c6 <adc_read>:
/* 아날로그 값 -> 디지털 값 변화 함수
ex) 조도, 토양 센서
channel => ADC 핀 넘버 */

uint16_t adc_read(uint8_t channel) {
	ADMUX &= 0xF0;
     1c6:	97 b1       	in	r25, 0x07	; 7
     1c8:	90 7f       	andi	r25, 0xF0	; 240
     1ca:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;
     1cc:	97 b1       	in	r25, 0x07	; 7
     1ce:	89 2b       	or	r24, r25
     1d0:	87 b9       	out	0x07, r24	; 7
	
	ADCSRA |= (1 << ADSC);
     1d2:	86 b1       	in	r24, 0x06	; 6
     1d4:	80 64       	ori	r24, 0x40	; 64
     1d6:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC));
     1d8:	36 99       	sbic	0x06, 6	; 6
     1da:	fe cf       	rjmp	.-4      	; 0x1d8 <adc_read+0x12>
	
	return ADCW; // 레지스터로 값 반환받기
     1dc:	84 b1       	in	r24, 0x04	; 4
     1de:	95 b1       	in	r25, 0x05	; 5
}
     1e0:	08 95       	ret

000001e2 <get_HUM>:
	
}

int get_HUM(void)
{
	return hum_dec;
     1e2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hum_dec>
}
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	08 95       	ret

000001ea <get_TEM>:

int get_TEM(void)
{
	return tem_dec;
     1ea:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <tem_dec>
}
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	08 95       	ret

000001f2 <map>:
	// 조도센서 ac1
	// 수위 ac2
	// 온습도 ac7
	DDRB |= (1<<PINB5) | (1<<PINB6);
	DDRE |= (1<<PINE3);
	DDRA |= (0<<PINA1) | (1<<PINA3) | (1<<PINA5);
     1f2:	4f 92       	push	r4
     1f4:	5f 92       	push	r5
     1f6:	6f 92       	push	r6
     1f8:	7f 92       	push	r7
     1fa:	af 92       	push	r10
     1fc:	bf 92       	push	r11
     1fe:	cf 92       	push	r12
     200:	df 92       	push	r13
     202:	ef 92       	push	r14
     204:	ff 92       	push	r15
     206:	0f 93       	push	r16
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
     212:	29 01       	movw	r4, r18
     214:	3a 01       	movw	r6, r20
     216:	9b 01       	movw	r18, r22
     218:	ac 01       	movw	r20, r24
     21a:	24 19       	sub	r18, r4
     21c:	35 09       	sbc	r19, r5
     21e:	46 09       	sbc	r20, r6
     220:	57 09       	sbc	r21, r7
     222:	89 89       	ldd	r24, Y+17	; 0x11
     224:	9a 89       	ldd	r25, Y+18	; 0x12
     226:	ab 89       	ldd	r26, Y+19	; 0x13
     228:	bc 89       	ldd	r27, Y+20	; 0x14
     22a:	bc 01       	movw	r22, r24
     22c:	cd 01       	movw	r24, r26
     22e:	6a 19       	sub	r22, r10
     230:	7b 09       	sbc	r23, r11
     232:	8c 09       	sbc	r24, r12
     234:	9d 09       	sbc	r25, r13
     236:	96 d6       	rcall	.+3372   	; 0xf64 <__mulsi3>
     238:	a8 01       	movw	r20, r16
     23a:	97 01       	movw	r18, r14
     23c:	24 19       	sub	r18, r4
     23e:	35 09       	sbc	r19, r5
     240:	46 09       	sbc	r20, r6
     242:	57 09       	sbc	r21, r7
     244:	9e d6       	rcall	.+3388   	; 0xf82 <__divmodsi4>
     246:	c6 01       	movw	r24, r12
     248:	b5 01       	movw	r22, r10
     24a:	62 0f       	add	r22, r18
     24c:	73 1f       	adc	r23, r19
     24e:	84 1f       	adc	r24, r20
     250:	95 1f       	adc	r25, r21
     252:	df 91       	pop	r29
     254:	cf 91       	pop	r28
     256:	1f 91       	pop	r17
     258:	0f 91       	pop	r16
     25a:	ff 90       	pop	r15
     25c:	ef 90       	pop	r14
     25e:	df 90       	pop	r13
     260:	cf 90       	pop	r12
     262:	bf 90       	pop	r11
     264:	af 90       	pop	r10
     266:	7f 90       	pop	r7
     268:	6f 90       	pop	r6
     26a:	5f 90       	pop	r5
     26c:	4f 90       	pop	r4
     26e:	08 95       	ret

00000270 <PWM_init>:
void PWM_init(void) // PWM A,B  PINB5,6  15,16
{
	//TCCR1B |= (1 << WGM12) | (1<<WGM13) | (1 << CS11);
	//TCCR1A |= (1 << COM1A1) | (1 << WGM11) ;
	
	TCCR1B |= (1 << WGM12) | (1<<WGM13) | (1 << CS11);
     270:	8e b5       	in	r24, 0x2e	; 46
     272:	8a 61       	ori	r24, 0x1A	; 26
     274:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |= (1 << COM1B1) | (1 << WGM11) ;
     276:	8f b5       	in	r24, 0x2f	; 47
     278:	82 62       	ori	r24, 0x22	; 34
     27a:	8f bd       	out	0x2f, r24	; 47
	ICR1 = 40000;
     27c:	80 e4       	ldi	r24, 0x40	; 64
     27e:	9c e9       	ldi	r25, 0x9C	; 156
     280:	97 bd       	out	0x27, r25	; 39
     282:	86 bd       	out	0x26, r24	; 38
	
	
	TCCR3A |= (1 << WGM30); // | (1<<WGM11);
     284:	eb e8       	ldi	r30, 0x8B	; 139
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	81 60       	ori	r24, 0x01	; 1
     28c:	80 83       	st	Z, r24
	TCCR3A |= (1 << COM3A1); // | (1 << COM3A0);
     28e:	80 81       	ld	r24, Z
     290:	80 68       	ori	r24, 0x80	; 128
     292:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM32) | (0<<CS32) | (1<<CS30) | (0<<CS31);
     294:	aa e8       	ldi	r26, 0x8A	; 138
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	8c 91       	ld	r24, X
     29a:	89 60       	ori	r24, 0x09	; 9
     29c:	8c 93       	st	X, r24
	
	
	TCCR3A |= (1 << COM3B1); // | (1 << COM3A0);
     29e:	80 81       	ld	r24, Z
     2a0:	80 62       	ori	r24, 0x20	; 32
     2a2:	80 83       	st	Z, r24
     2a4:	08 95       	ret

000002a6 <RFID>:
	
}

//RFID 동작 함수
void RFID(uint8_t byte, uint8_t str[MAX_LEN], int pin_stat)
{
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
     2b6:	60 97       	sbiw	r28, 0x10	; 16
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	f8 94       	cli
     2bc:	de bf       	out	0x3e, r29	; 62
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	cd bf       	out	0x3d, r28	; 61
     2c2:	8b 01       	movw	r16, r22
     2c4:	7a 01       	movw	r14, r20

	uint8_t pin_num[MAX_LEN]; // 카드 아이디 저장 변수
	if(PIND & 0x04) // 푸쉬 버튼 상태1
     2c6:	82 9b       	sbis	0x10, 2	; 16
     2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <RFID+0x3c>
	{
		PORTC = 0x20;	// LED ON
     2ca:	90 e2       	ldi	r25, 0x20	; 32
     2cc:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ce:	ef e8       	ldi	r30, 0x8F	; 143
     2d0:	f1 e0       	ldi	r31, 0x01	; 1
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <RFID+0x2c>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <RFID+0x32>
     2d8:	00 00       	nop
		pin_stat = 1;	// 버튼 상태 활성화
     2da:	ee 24       	eor	r14, r14
     2dc:	e3 94       	inc	r14
     2de:	f1 2c       	mov	r15, r1
     2e0:	0d c0       	rjmp	.+26     	; 0x2fc <RFID+0x56>
		_delay_us(100);			
	}
	else if(PIND & 0x10) // 푸쉬 버튼 상태2
     2e2:	84 9b       	sbis	0x10, 4	; 16
     2e4:	0b c0       	rjmp	.+22     	; 0x2fc <RFID+0x56>
	{
		PORTC = 0x00;	// LED OFF 
     2e6:	15 ba       	out	0x15, r1	; 21
		pin_stat = 0;	// 버튼 상태 초기화
		
		OCR1A = 2000;	// 문 개폐 서보모터 동작
     2e8:	20 ed       	ldi	r18, 0xD0	; 208
     2ea:	37 e0       	ldi	r19, 0x07	; 7
     2ec:	3b bd       	out	0x2b, r19	; 43
     2ee:	2a bd       	out	0x2a, r18	; 42
		OCR1B = 4000;
     2f0:	20 ea       	ldi	r18, 0xA0	; 160
     2f2:	3f e0       	ldi	r19, 0x0F	; 15
     2f4:	39 bd       	out	0x29, r19	; 41
     2f6:	28 bd       	out	0x28, r18	; 40
		_delay_us(100);			
	}
	else if(PIND & 0x10) // 푸쉬 버튼 상태2
	{
		PORTC = 0x00;	// LED OFF 
		pin_stat = 0;	// 버튼 상태 초기화
     2f8:	e1 2c       	mov	r14, r1
     2fa:	f1 2c       	mov	r15, r1
		
		OCR1A = 2000;	// 문 개폐 서보모터 동작
		OCR1B = 4000;
	}
		
	if(byte == CARD_FOUND) // 카드가 입력되면 
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	81 f5       	brne	.+96     	; 0x360 <RFID+0xba>
	{
		byte = mfrc522_get_card_serial(str); // 카드의 아이디를 받음
     300:	c8 01       	movw	r24, r16
     302:	34 d2       	rcall	.+1128   	; 0x76c <mfrc522_get_card_serial>
		
		if(pin_stat == 1) // 버튼이 활성화 되어 있으면
     304:	ea 94       	dec	r14
     306:	ef 28       	or	r14, r15
     308:	99 f4       	brne	.+38     	; 0x330 <RFID+0x8a>
     30a:	0d c0       	rjmp	.+26     	; 0x326 <RFID+0x80>
		{
			
			for(int i = 0;i<=MAX_LEN;i++) // 입력된 카드의 아이디를 저장함
			{
				pin_num[i] = str[i];
     30c:	f8 01       	movw	r30, r16
     30e:	e8 0f       	add	r30, r24
     310:	f9 1f       	adc	r31, r25
     312:	20 81       	ld	r18, Z
     314:	e1 e0       	ldi	r30, 0x01	; 1
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	ec 0f       	add	r30, r28
     31a:	fd 1f       	adc	r31, r29
     31c:	e8 0f       	add	r30, r24
     31e:	f9 1f       	adc	r31, r25
     320:	20 83       	st	Z, r18
		byte = mfrc522_get_card_serial(str); // 카드의 아이디를 받음
		
		if(pin_stat == 1) // 버튼이 활성화 되어 있으면
		{
			
			for(int i = 0;i<=MAX_LEN;i++) // 입력된 카드의 아이디를 저장함
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	02 c0       	rjmp	.+4      	; 0x32a <RFID+0x84>
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	81 31       	cpi	r24, 0x11	; 17
     32c:	91 05       	cpc	r25, r1
     32e:	74 f3       	brlt	.-36     	; 0x30c <RFID+0x66>
				pin_num[i] = str[i];
			}
			
		}
		
		if(strcmp(str,pin_num)==0) // 카드의 아이디와 저장된 아이디를 비교하여 문을 염
     330:	be 01       	movw	r22, r28
     332:	6f 5f       	subi	r22, 0xFF	; 255
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	c8 01       	movw	r24, r16
     338:	5e d7       	rcall	.+3772   	; 0x11f6 <strcmp>
     33a:	89 2b       	or	r24, r25
     33c:	89 f4       	brne	.+34     	; 0x360 <RFID+0xba>
		{
			OCR1A = 4000;
     33e:	80 ea       	ldi	r24, 0xA0	; 160
     340:	9f e0       	ldi	r25, 0x0F	; 15
     342:	9b bd       	out	0x2b, r25	; 43
     344:	8a bd       	out	0x2a, r24	; 42
			OCR1B = 2000;
     346:	80 ed       	ldi	r24, 0xD0	; 208
     348:	97 e0       	ldi	r25, 0x07	; 7
     34a:	99 bd       	out	0x29, r25	; 41
     34c:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	82 e5       	ldi	r24, 0x52	; 82
     352:	97 e0       	ldi	r25, 0x07	; 7
     354:	21 50       	subi	r18, 0x01	; 1
     356:	80 40       	sbci	r24, 0x00	; 0
     358:	90 40       	sbci	r25, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <RFID+0xae>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <RFID+0xb8>
     35e:	00 00       	nop
	}
	else // 이외의 경우에서 문을 닫음
	{
		OCR1A = 2000;
	}*/
}
     360:	60 96       	adiw	r28, 0x10	; 16
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	08 95       	ret

0000037a <Venti_con>:

void Venti_con(int handle) // 환풍기 컨트롤 5,6
{
	if(handle >70)
     37a:	87 34       	cpi	r24, 0x47	; 71
     37c:	91 05       	cpc	r25, r1
     37e:	24 f0       	brlt	.+8      	; 0x388 <Venti_con+0xe>
	{
		PORTA |= (1<<PINA5); // 임시
     380:	8b b3       	in	r24, 0x1b	; 27
     382:	80 62       	ori	r24, 0x20	; 32
     384:	8b bb       	out	0x1b, r24	; 27
     386:	08 95       	ret
	}
	else
	{
		PORTA = PORTA & ~(0x40);
     388:	8b b3       	in	r24, 0x1b	; 27
     38a:	8f 7b       	andi	r24, 0xBF	; 191
     38c:	8b bb       	out	0x1b, r24	; 27
     38e:	08 95       	ret

00000390 <W_Pump>:
	}
}

void W_Pump(int handle) // 물 펌프 컨트롤 3,4
{
	if(handle >50)
     390:	c3 97       	sbiw	r24, 0x33	; 51
     392:	24 f0       	brlt	.+8      	; 0x39c <W_Pump+0xc>
	{
		PORTA |= (1<<PINA3); // 임시
     394:	8b b3       	in	r24, 0x1b	; 27
     396:	88 60       	ori	r24, 0x08	; 8
     398:	8b bb       	out	0x1b, r24	; 27
     39a:	08 95       	ret
	}
	else
	{
		PORTA |= (0<<PINA3); // 임시
     39c:	8b b3       	in	r24, 0x1b	; 27
     39e:	8b bb       	out	0x1b, r24	; 27
     3a0:	08 95       	ret

000003a2 <Led_Con>:
	}
}

void Led_Con(int con)  // LED 컨트롤 PWM 3a,3b
{
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
	static int pos;
	pos = map(con, 1023 , 0, 0 , 255); // 센싱 값의 범위를 제어에 맞게 변환
     3b2:	bc 01       	movw	r22, r24
     3b4:	99 0f       	add	r25, r25
     3b6:	88 0b       	sbc	r24, r24
     3b8:	99 0b       	sbc	r25, r25
     3ba:	1f 92       	push	r1
     3bc:	1f 92       	push	r1
     3be:	1f 92       	push	r1
     3c0:	2f ef       	ldi	r18, 0xFF	; 255
     3c2:	2f 93       	push	r18
     3c4:	a1 2c       	mov	r10, r1
     3c6:	b1 2c       	mov	r11, r1
     3c8:	65 01       	movw	r12, r10
     3ca:	e1 2c       	mov	r14, r1
     3cc:	f1 2c       	mov	r15, r1
     3ce:	87 01       	movw	r16, r14
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	33 e0       	ldi	r19, 0x03	; 3
     3d4:	40 e0       	ldi	r20, 0x00	; 0
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	0c df       	rcall	.-488    	; 0x1f2 <map>
     3da:	0f 90       	pop	r0
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <pos.2156+0x1>
     3e6:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <pos.2156>
	OCR3A = pos;
     3ea:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     3ee:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR3B = pos;
     3f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pos.2156>
     3f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <pos.2156+0x1>
     3fa:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     3fe:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
}
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	ff 90       	pop	r15
     408:	ef 90       	pop	r14
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	bf 90       	pop	r11
     410:	af 90       	pop	r10
     412:	08 95       	ret

00000414 <Uart>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     414:	4a e0       	ldi	r20, 0x0A	; 10
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	01 d7       	rcall	.+3586   	; 0x121e <__itoa_ncheck>

void Uart(int num)  // 유아트 통신 스트링으로 전송
{
	static char s[10];
	itoa(num, s, 10); // 정수를 문자열로 변환     정수 num을 문자열 s로 변환
	Print_String((char*)s);
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	06 c2       	rjmp	.+1036   	; 0x82e <Print_String>
     422:	08 95       	ret

00000424 <main>:
}

int main(void)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	60 97       	sbiw	r28, 0x10	; 16
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
	uint8_t byte;
	uint8_t str[MAX_LEN];
	char s[10];
	int pin_stat;
	// 초기화
	spi_init();
     438:	d3 d1       	rcall	.+934    	; 0x7e0 <spi_init>
	mfrc522_init();
     43a:	59 d0       	rcall	.+178    	; 0x4ee <mfrc522_init>
	Usart_Init();
     43c:	dd d1       	rcall	.+954    	; 0x7f8 <Usart_Init>
	adc_init();
     43e:	b9 de       	rcall	.-654    	; 0x1b2 <adc_init>
	PWM_init();
     440:	17 df       	rcall	.-466    	; 0x270 <PWM_init>
     442:	82 e0       	ldi	r24, 0x02	; 2
	
	// RFID 관련 레지스터 변수 초기화, 레지스터는 RFID 헤더 파일 참조
	byte = mfrc522_read(ComIEnReg);
     444:	41 d0       	rcall	.+130    	; 0x4c8 <mfrc522_read>
     446:	68 2f       	mov	r22, r24
	mfrc522_write(ComIEnReg,byte|0x20);
     448:	60 62       	ori	r22, 0x20	; 32
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	2c d0       	rcall	.+88     	; 0x4a6 <mfrc522_write>
     44e:	83 e0       	ldi	r24, 0x03	; 3
	byte = mfrc522_read(DivIEnReg);
     450:	3b d0       	rcall	.+118    	; 0x4c8 <mfrc522_read>
     452:	68 2f       	mov	r22, r24
	mfrc522_write(DivIEnReg,byte|0x80);	
     454:	60 68       	ori	r22, 0x80	; 128
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	26 d0       	rcall	.+76     	; 0x4a6 <mfrc522_write>
     45a:	c3 de       	rcall	.-634    	; 0x1e2 <get_HUM>
	
	while(1)
	{			
		// 온습도 센서 
		
		humid = get_HUM();
     45c:	8c 01       	movw	r16, r24
     45e:	c5 de       	rcall	.-630    	; 0x1ea <get_TEM>
		humid_value = humid;
		tem = get_TEM();
     460:	7c 01       	movw	r14, r24
		tem_value = 10;//tem;
		
		//환풍기 조정
		Venti_con(humid);
     462:	c8 01       	movw	r24, r16
     464:	8a df       	rcall	.-236    	; 0x37a <Venti_con>
		
		// 토양 센서
		soil = adc_read(0);
     466:	80 e0       	ldi	r24, 0x00	; 0
     468:	90 e0       	ldi	r25, 0x00	; 0
		soil_value = 20;//soil / 10;
		
		//물펌프
		W_Pump(soil);
     46a:	ad de       	rcall	.-678    	; 0x1c6 <adc_read>
				
		// 조도 센서
		cds = adc_read(1);
     46c:	91 df       	rcall	.-222    	; 0x390 <W_Pump>
     46e:	81 e0       	ldi	r24, 0x01	; 1
		cds_value = 30;//cds/10;
		
		//LED 조정
		Led_Con(cds);		
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	a9 de       	rcall	.-686    	; 0x1c6 <adc_read>
		
		//물높이 센서
		water = adc_read(2);		
     474:	96 df       	rcall	.-212    	; 0x3a2 <Led_Con>
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	90 e0       	ldi	r25, 0x00	; 0
		Uart(water_value);
		Print_String("h");
		Uart(humid_value);
		Print_String("t");
		Uart(tem_value);*/
		Usart_TX('s');
     47a:	a5 de       	rcall	.-694    	; 0x1c6 <adc_read>
     47c:	83 e7       	ldi	r24, 0x73	; 115
		Uart(humid);
     47e:	d0 d1       	rcall	.+928    	; 0x820 <Usart_TX>
     480:	c8 01       	movw	r24, r16
     482:	c8 df       	rcall	.-112    	; 0x414 <Uart>
		Usart_TX('c');
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	cc d1       	rcall	.+920    	; 0x820 <Usart_TX>
     488:	c7 01       	movw	r24, r14
		Uart(tem);
     48a:	c4 df       	rcall	.-120    	; 0x414 <Uart>
     48c:	8a e0       	ldi	r24, 0x0A	; 10
     48e:	c8 d1       	rcall	.+912    	; 0x820 <Usart_TX>
		Usart_TX('\n');
     490:	be 01       	movw	r22, r28
     492:	6f 5f       	subi	r22, 0xFF	; 255
     494:	7f 4f       	sbci	r23, 0xFF	; 255
		
		byte = mfrc522_request(PICC_REQALL,str); // RFID 상태 입력		
     496:	82 e5       	ldi	r24, 0x52	; 82
     498:	36 d1       	rcall	.+620    	; 0x706 <mfrc522_request>
     49a:	69 89       	ldd	r22, Y+17	; 0x11
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	50 e0       	ldi	r21, 0x00	; 0
		//RFID 동작
		pin_stat = PINA1;
		RFID(byte,str[MAX_LEN], pin_stat);
     4a2:	01 df       	rcall	.-510    	; 0x2a6 <RFID>
     4a4:	da cf       	rjmp	.-76     	; 0x45a <main+0x36>

000004a6 <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
     4a6:	cf 93       	push	r28
     4a8:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
     4aa:	98 b3       	in	r25, 0x18	; 24
     4ac:	9e 7f       	andi	r25, 0xFE	; 254
     4ae:	98 bb       	out	0x18, r25	; 24
	spi_transmit((reg<<1)&0x7E);
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	8e 77       	andi	r24, 0x7E	; 126
     4b8:	9a d1       	rcall	.+820    	; 0x7ee <spi_transmit>
	spi_transmit(data);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	98 d1       	rcall	.+816    	; 0x7ee <spi_transmit>
	DISABLE_CHIP();
     4be:	88 b3       	in	r24, 0x18	; 24
     4c0:	81 60       	ori	r24, 0x01	; 1
     4c2:	88 bb       	out	0x18, r24	; 24
}
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;	
	ENABLE_CHIP();
     4c8:	98 b3       	in	r25, 0x18	; 24
     4ca:	9e 7f       	andi	r25, 0xFE	; 254
     4cc:	98 bb       	out	0x18, r25	; 24
	spi_transmit(((reg<<1)&0x7E)|0x80);
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	8e 77       	andi	r24, 0x7E	; 126
     4d6:	80 68       	ori	r24, 0x80	; 128
     4d8:	8a d1       	rcall	.+788    	; 0x7ee <spi_transmit>
	data = spi_transmit(0x00);
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	88 d1       	rcall	.+784    	; 0x7ee <spi_transmit>
	DISABLE_CHIP();
     4de:	98 b3       	in	r25, 0x18	; 24
     4e0:	91 60       	ori	r25, 0x01	; 1
     4e2:	98 bb       	out	0x18, r25	; 24
	return data;
}
     4e4:	08 95       	ret

000004e6 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
     4e6:	6f e0       	ldi	r22, 0x0F	; 15
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	dd cf       	rjmp	.-70     	; 0x4a6 <mfrc522_write>
     4ec:	08 95       	ret

000004ee <mfrc522_init>:


void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
     4ee:	fb df       	rcall	.-10     	; 0x4e6 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
     4f0:	6d e8       	ldi	r22, 0x8D	; 141
     4f2:	8a e2       	ldi	r24, 0x2A	; 42
     4f4:	d8 df       	rcall	.-80     	; 0x4a6 <mfrc522_write>
    mfrc522_write(TPrescalerReg, 0x3E);
     4f6:	6e e3       	ldi	r22, 0x3E	; 62
     4f8:	8b e2       	ldi	r24, 0x2B	; 43
     4fa:	d5 df       	rcall	.-86     	; 0x4a6 <mfrc522_write>
    mfrc522_write(TReloadReg_1, 30);   
     4fc:	6e e1       	ldi	r22, 0x1E	; 30
     4fe:	8c e2       	ldi	r24, 0x2C	; 44
     500:	d2 df       	rcall	.-92     	; 0x4a6 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	8d e2       	ldi	r24, 0x2D	; 45
     506:	cf df       	rcall	.-98     	; 0x4a6 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
     508:	60 e4       	ldi	r22, 0x40	; 64
     50a:	85 e1       	ldi	r24, 0x15	; 21
	mfrc522_write(ModeReg, 0x3D);
     50c:	cc df       	rcall	.-104    	; 0x4a6 <mfrc522_write>
     50e:	6d e3       	ldi	r22, 0x3D	; 61
     510:	81 e1       	ldi	r24, 0x11	; 17
     512:	c9 df       	rcall	.-110    	; 0x4a6 <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
     514:	84 e1       	ldi	r24, 0x14	; 20
     516:	d8 df       	rcall	.-80     	; 0x4c8 <mfrc522_read>
	if(!(byte&0x03))
     518:	98 2f       	mov	r25, r24
     51a:	93 70       	andi	r25, 0x03	; 3
     51c:	21 f4       	brne	.+8      	; 0x526 <mfrc522_init+0x38>
	{
		mfrc522_write(TxControlReg,byte|0x03);
     51e:	68 2f       	mov	r22, r24
     520:	63 60       	ori	r22, 0x03	; 3
     522:	84 e1       	ldi	r24, 0x14	; 20
     524:	c0 cf       	rjmp	.-128    	; 0x4a6 <mfrc522_write>
     526:	08 95       	ret

00000528 <mfrc522_to_card>:
     528:	4f 92       	push	r4
   
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
     52a:	5f 92       	push	r5
     52c:	6f 92       	push	r6
     52e:	7f 92       	push	r7
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	d8 2f       	mov	r29, r24
     54a:	7b 01       	movw	r14, r22
     54c:	c4 2f       	mov	r28, r20
     54e:	59 01       	movw	r10, r18
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
     550:	8c 30       	cpi	r24, 0x0C	; 12
     552:	29 f0       	breq	.+10     	; 0x55e <mfrc522_to_card+0x36>
     554:	8e 30       	cpi	r24, 0x0E	; 14
     556:	61 f0       	breq	.+24     	; 0x570 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
     558:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
     55a:	81 2c       	mov	r8, r1
     55c:	10 c0       	rjmp	.+32     	; 0x57e <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     55e:	0f 2e       	mov	r0, r31
     560:	f0 e3       	ldi	r31, 0x30	; 48
     562:	9f 2e       	mov	r9, r31
     564:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
     566:	0f 2e       	mov	r0, r31
     568:	f7 e7       	ldi	r31, 0x77	; 119
     56a:	8f 2e       	mov	r8, r31
     56c:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
     56e:	07 c0       	rjmp	.+14     	; 0x57e <mfrc522_to_card+0x56>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     570:	68 94       	set
     572:	99 24       	eor	r9, r9
     574:	94 f8       	bld	r9, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
     576:	0f 2e       	mov	r0, r31
     578:	f2 e1       	ldi	r31, 0x12	; 18
     57a:	8f 2e       	mov	r8, r31
     57c:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
     57e:	84 e0       	ldi	r24, 0x04	; 4
     580:	a3 df       	rcall	.-186    	; 0x4c8 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     582:	68 2f       	mov	r22, r24
     584:	6f 77       	andi	r22, 0x7F	; 127
     586:	84 e0       	ldi	r24, 0x04	; 4
     588:	8e df       	rcall	.-228    	; 0x4a6 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
     58a:	8a e0       	ldi	r24, 0x0A	; 10
     58c:	9d df       	rcall	.-198    	; 0x4c8 <mfrc522_read>
     58e:	68 2f       	mov	r22, r24
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     590:	60 68       	ori	r22, 0x80	; 128
     592:	8a e0       	ldi	r24, 0x0A	; 10
     594:	88 df       	rcall	.-240    	; 0x4a6 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	85 df       	rcall	.-246    	; 0x4a6 <mfrc522_write>
     59c:	41 2c       	mov	r4, r1

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     59e:	51 2c       	mov	r5, r1
     5a0:	32 01       	movw	r6, r4
     5a2:	0b c0       	rjmp	.+22     	; 0x5ba <mfrc522_to_card+0x92>
     5a4:	f7 01       	movw	r30, r14
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
     5a6:	e4 0d       	add	r30, r4
     5a8:	f5 1d       	adc	r31, r5
     5aa:	60 81       	ld	r22, Z
     5ac:	89 e0       	ldi	r24, 0x09	; 9
     5ae:	7b df       	rcall	.-266    	; 0x4a6 <mfrc522_write>
     5b0:	8f ef       	ldi	r24, 0xFF	; 255
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     5b2:	48 1a       	sub	r4, r24
     5b4:	58 0a       	sbc	r5, r24
     5b6:	68 0a       	sbc	r6, r24
     5b8:	78 0a       	sbc	r7, r24
     5ba:	8c 2f       	mov	r24, r28
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	a0 e0       	ldi	r26, 0x00	; 0
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	48 16       	cp	r4, r24
     5c4:	59 06       	cpc	r5, r25
     5c6:	6a 06       	cpc	r6, r26
     5c8:	7b 06       	cpc	r7, r27
     5ca:	60 f3       	brcs	.-40     	; 0x5a4 <mfrc522_to_card+0x7c>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     5cc:	6d 2f       	mov	r22, r29
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	6a df       	rcall	.-300    	; 0x4a6 <mfrc522_write>
    if (cmd == Transceive_CMD)
     5d2:	dc 30       	cpi	r29, 0x0C	; 12
    {    
		n=mfrc522_read(BitFramingReg);
     5d4:	31 f4       	brne	.+12     	; 0x5e2 <mfrc522_to_card+0xba>
     5d6:	8d e0       	ldi	r24, 0x0D	; 13
     5d8:	77 df       	rcall	.-274    	; 0x4c8 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
     5da:	68 2f       	mov	r22, r24
     5dc:	60 68       	ori	r22, 0x80	; 128
     5de:	8d e0       	ldi	r24, 0x0D	; 13
     5e0:	62 df       	rcall	.-316    	; 0x4a6 <mfrc522_write>
     5e2:	0f 2e       	mov	r0, r31
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     5e4:	f0 ed       	ldi	r31, 0xD0	; 208
     5e6:	cf 2e       	mov	r12, r31
     5e8:	f7 e0       	ldi	r31, 0x07	; 7
     5ea:	df 2e       	mov	r13, r31
     5ec:	e1 2c       	mov	r14, r1
     5ee:	f1 2c       	mov	r15, r1
     5f0:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
     5f2:	84 e0       	ldi	r24, 0x04	; 4
     5f4:	69 df       	rcall	.-302    	; 0x4c8 <mfrc522_read>
     5f6:	c8 2f       	mov	r28, r24
     5f8:	e1 e0       	ldi	r30, 0x01	; 1
        i--;
     5fa:	ce 1a       	sub	r12, r30
     5fc:	d1 08       	sbc	r13, r1
     5fe:	e1 08       	sbc	r14, r1
     600:	f1 08       	sbc	r15, r1
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     602:	29 f0       	breq	.+10     	; 0x60e <mfrc522_to_card+0xe6>
     604:	80 fd       	sbrc	r24, 0
     606:	03 c0       	rjmp	.+6      	; 0x60e <mfrc522_to_card+0xe6>
     608:	89 2d       	mov	r24, r9
     60a:	8c 23       	and	r24, r28

	tmp=mfrc522_read(BitFramingReg);
     60c:	91 f3       	breq	.-28     	; 0x5f2 <mfrc522_to_card+0xca>
     60e:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     610:	5b df       	rcall	.-330    	; 0x4c8 <mfrc522_read>
     612:	68 2f       	mov	r22, r24
     614:	6f 77       	andi	r22, 0x7F	; 127
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	46 df       	rcall	.-372    	; 0x4a6 <mfrc522_write>
	
    if (i != 0)
     61a:	cd 28       	or	r12, r13
     61c:	ce 28       	or	r12, r14
     61e:	cf 28       	or	r12, r15
     620:	09 f4       	brne	.+2      	; 0x624 <mfrc522_to_card+0xfc>
     622:	5c c0       	rjmp	.+184    	; 0x6dc <mfrc522_to_card+0x1b4>
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     624:	86 e0       	ldi	r24, 0x06	; 6
     626:	50 df       	rcall	.-352    	; 0x4c8 <mfrc522_read>
     628:	8b 71       	andi	r24, 0x1B	; 27
     62a:	09 f0       	breq	.+2      	; 0x62e <mfrc522_to_card+0x106>
     62c:	59 c0       	rjmp	.+178    	; 0x6e0 <mfrc522_to_card+0x1b8>
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
     62e:	c8 21       	and	r28, r8
     630:	c0 fd       	sbrc	r28, 0
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
     632:	02 c0       	rjmp	.+4      	; 0x638 <mfrc522_to_card+0x110>
     634:	c1 e0       	ldi	r28, 0x01	; 1
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
     636:	01 c0       	rjmp	.+2      	; 0x63a <mfrc522_to_card+0x112>
			}

            if (cmd == Transceive_CMD)
     638:	c2 e0       	ldi	r28, 0x02	; 2
     63a:	dc 30       	cpi	r29, 0x0C	; 12
     63c:	09 f0       	breq	.+2      	; 0x640 <mfrc522_to_card+0x118>
            {
               	n = mfrc522_read(FIFOLevelReg);
     63e:	51 c0       	rjmp	.+162    	; 0x6e2 <mfrc522_to_card+0x1ba>
     640:	8a e0       	ldi	r24, 0x0A	; 10
     642:	42 df       	rcall	.-380    	; 0x4c8 <mfrc522_read>
     644:	d8 2f       	mov	r29, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
     646:	8c e0       	ldi	r24, 0x0C	; 12
     648:	3f df       	rcall	.-386    	; 0x4c8 <mfrc522_read>
     64a:	28 2f       	mov	r18, r24
     64c:	27 70       	andi	r18, 0x07	; 7
     64e:	a9 f0       	breq	.+42     	; 0x67a <mfrc522_to_card+0x152>
                if (lastBits)
     650:	8d 2f       	mov	r24, r29
                {   
					*back_data_len = (n-1)*8 + lastBits;   
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	82 0f       	add	r24, r18
     664:	91 1d       	adc	r25, r1
     666:	09 2e       	mov	r0, r25
     668:	00 0c       	add	r0, r0
     66a:	aa 0b       	sbc	r26, r26
     66c:	bb 0b       	sbc	r27, r27
     66e:	f8 01       	movw	r30, r16
     670:	80 83       	st	Z, r24
     672:	91 83       	std	Z+1, r25	; 0x01
     674:	a2 83       	std	Z+2, r26	; 0x02
     676:	b3 83       	std	Z+3, r27	; 0x03
     678:	11 c0       	rjmp	.+34     	; 0x69c <mfrc522_to_card+0x174>
     67a:	8d 2f       	mov	r24, r29
				}
                else
                {   
					*back_data_len = n*8;   
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	88 0f       	add	r24, r24
     680:	99 1f       	adc	r25, r25
     682:	88 0f       	add	r24, r24
     684:	99 1f       	adc	r25, r25
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	09 2e       	mov	r0, r25
     68c:	00 0c       	add	r0, r0
     68e:	aa 0b       	sbc	r26, r26
     690:	bb 0b       	sbc	r27, r27
     692:	f8 01       	movw	r30, r16
     694:	80 83       	st	Z, r24
     696:	91 83       	std	Z+1, r25	; 0x01
     698:	a2 83       	std	Z+2, r26	; 0x02
     69a:	b3 83       	std	Z+3, r27	; 0x03
				}

                if (n == 0)
     69c:	d1 11       	cpse	r29, r1
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <mfrc522_to_card+0x17a>
                {   
					n = 1;    
     6a0:	d1 e0       	ldi	r29, 0x01	; 1
				}
                if (n > MAX_LEN)
     6a2:	d1 31       	cpi	r29, 0x11	; 17
     6a4:	08 f0       	brcs	.+2      	; 0x6a8 <mfrc522_to_card+0x180>
                {   
					n = MAX_LEN;   
     6a6:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     6a8:	c1 2c       	mov	r12, r1
     6aa:	d1 2c       	mov	r13, r1
     6ac:	76 01       	movw	r14, r12
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <mfrc522_to_card+0x1a0>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
     6b0:	85 01       	movw	r16, r10
     6b2:	0c 0d       	add	r16, r12
     6b4:	1d 1d       	adc	r17, r13
     6b6:	89 e0       	ldi	r24, 0x09	; 9
     6b8:	07 df       	rcall	.-498    	; 0x4c8 <mfrc522_read>
     6ba:	f8 01       	movw	r30, r16
     6bc:	80 83       	st	Z, r24
     6be:	ff ef       	ldi	r31, 0xFF	; 255
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     6c0:	cf 1a       	sub	r12, r31
     6c2:	df 0a       	sbc	r13, r31
     6c4:	ef 0a       	sbc	r14, r31
     6c6:	ff 0a       	sbc	r15, r31
     6c8:	8d 2f       	mov	r24, r29
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	a0 e0       	ldi	r26, 0x00	; 0
     6ce:	b0 e0       	ldi	r27, 0x00	; 0
     6d0:	c8 16       	cp	r12, r24
     6d2:	d9 06       	cpc	r13, r25
     6d4:	ea 06       	cpc	r14, r26
     6d6:	fb 06       	cpc	r15, r27
     6d8:	58 f3       	brcs	.-42     	; 0x6b0 <mfrc522_to_card+0x188>
     6da:	03 c0       	rjmp	.+6      	; 0x6e2 <mfrc522_to_card+0x1ba>
     6dc:	c3 e0       	ldi	r28, 0x03	; 3
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     6de:	01 c0       	rjmp	.+2      	; 0x6e2 <mfrc522_to_card+0x1ba>
     6e0:	c3 e0       	ldi	r28, 0x03	; 3
				}
            }
        }
        else
        {   
			status = ERROR;  
     6e2:	8c 2f       	mov	r24, r28
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	bf 90       	pop	r11
     6f6:	af 90       	pop	r10
     6f8:	9f 90       	pop	r9
     6fa:	8f 90       	pop	r8
     6fc:	7f 90       	pop	r7
     6fe:	6f 90       	pop	r6
     700:	5f 90       	pop	r5
     702:	4f 90       	pop	r4
     704:	08 95       	ret

00000706 <mfrc522_request>:
     706:	ef 92       	push	r14
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <mfrc522_request+0xe>
     714:	00 d0       	rcall	.+0      	; 0x716 <mfrc522_request+0x10>
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	18 2f       	mov	r17, r24
     71c:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     71e:	67 e0       	ldi	r22, 0x07	; 7
     720:	8d e0       	ldi	r24, 0x0D	; 13
     722:	c1 de       	rcall	.-638    	; 0x4a6 <mfrc522_write>
	
	tag_type[0] = req_mode;
     724:	f7 01       	movw	r30, r14
     726:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
     728:	8e 01       	movw	r16, r28
     72a:	0f 5f       	subi	r16, 0xFF	; 255
     72c:	1f 4f       	sbci	r17, 0xFF	; 255
     72e:	97 01       	movw	r18, r14
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	b7 01       	movw	r22, r14
     734:	8c e0       	ldi	r24, 0x0C	; 12
     736:	f8 de       	rcall	.-528    	; 0x528 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	51 f4       	brne	.+20     	; 0x750 <mfrc522_request+0x4a>
     73c:	49 81       	ldd	r20, Y+1	; 0x01
     73e:	5a 81       	ldd	r21, Y+2	; 0x02
     740:	6b 81       	ldd	r22, Y+3	; 0x03
     742:	7c 81       	ldd	r23, Y+4	; 0x04
     744:	40 31       	cpi	r20, 0x10	; 16
     746:	51 05       	cpc	r21, r1
     748:	61 05       	cpc	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	19 f4       	brne	.+6      	; 0x754 <mfrc522_request+0x4e>
     74e:	03 c0       	rjmp	.+6      	; 0x756 <mfrc522_request+0x50>
	{    
		status = ERROR;
     750:	83 e0       	ldi	r24, 0x03	; 3
     752:	01 c0       	rjmp	.+2      	; 0x756 <mfrc522_request+0x50>
     754:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <mfrc522_get_card_serial>:
    return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	00 d0       	rcall	.+0      	; 0x77a <mfrc522_get_card_serial+0xe>
     77a:	00 d0       	rcall	.+0      	; 0x77c <mfrc522_get_card_serial+0x10>
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	8d e0       	ldi	r24, 0x0D	; 13
     786:	8f de       	rcall	.-738    	; 0x4a6 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
     788:	83 e9       	ldi	r24, 0x93	; 147
     78a:	f7 01       	movw	r30, r14
     78c:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
     78e:	80 e2       	ldi	r24, 0x20	; 32
     790:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
     792:	8e 01       	movw	r16, r28
     794:	0f 5f       	subi	r16, 0xFF	; 255
     796:	1f 4f       	sbci	r17, 0xFF	; 255
     798:	97 01       	movw	r18, r14
     79a:	42 e0       	ldi	r20, 0x02	; 2
     79c:	b7 01       	movw	r22, r14
     79e:	8c e0       	ldi	r24, 0x0C	; 12
     7a0:	c3 de       	rcall	.-634    	; 0x528 <mfrc522_to_card>

    if (status == CARD_FOUND)
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	91 f4       	brne	.+36     	; 0x7ca <mfrc522_get_card_serial+0x5e>
     7a6:	07 c0       	rjmp	.+14     	; 0x7b6 <mfrc522_get_card_serial+0x4a>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
     7a8:	f7 01       	movw	r30, r14
     7aa:	e9 0f       	add	r30, r25
     7ac:	f1 1d       	adc	r31, r1
     7ae:	30 81       	ld	r19, Z
     7b0:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     7b2:	9f 5f       	subi	r25, 0xFF	; 255
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <mfrc522_get_card_serial+0x4e>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	94 30       	cpi	r25, 0x04	; 4
     7bc:	a8 f3       	brcs	.-22     	; 0x7a8 <mfrc522_get_card_serial+0x3c>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     7be:	f7 01       	movw	r30, r14
     7c0:	e9 0f       	add	r30, r25
     7c2:	f1 1d       	adc	r31, r1
     7c4:	90 81       	ld	r25, Z
     7c6:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
     7c8:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	08 95       	ret

000007e0 <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
     7e0:	87 b3       	in	r24, 0x17	; 23
     7e2:	83 61       	ori	r24, 0x13	; 19
     7e4:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
     7e6:	8d b1       	in	r24, 0x0d	; 13
     7e8:	81 65       	ori	r24, 0x51	; 81
     7ea:	8d b9       	out	0x0d, r24	; 13
     7ec:	08 95       	ret

000007ee <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     7ee:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     7f0:	77 9b       	sbis	0x0e, 7	; 14
     7f2:	fe cf       	rjmp	.-4      	; 0x7f0 <spi_transmit+0x2>
	
	return SPDR;
     7f4:	8f b1       	in	r24, 0x0f	; 15
}
     7f6:	08 95       	ret

000007f8 <Usart_Init>:
	Baud Rate = 2 ^(U2Xn) x F_CPU  / 16 (UBRRn + 1)
*/

void Usart_Init(void)
{
	UBRR1H = (uint8_t)(UBRR_Value >> 8);
     7f8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = (uint8_t) UBRR_Value;
     7fc:	87 e6       	ldi	r24, 0x67	; 103
     7fe:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	UCSR1C |= (1 << UCSZ10) | (1 << UCSZ11);
     802:	ed e9       	ldi	r30, 0x9D	; 157
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	86 60       	ori	r24, 0x06	; 6
     80a:	80 83       	st	Z, r24
	UCSR1C &= ~(1 << USBS1);
     80c:	80 81       	ld	r24, Z
     80e:	87 7f       	andi	r24, 0xF7	; 247
     810:	80 83       	st	Z, r24
	UCSR1C &= ~((1 << UPM11) | (1 << UPM10));
     812:	80 81       	ld	r24, Z
     814:	8f 7c       	andi	r24, 0xCF	; 207
     816:	80 83       	st	Z, r24
	
	UCSR1B = (1 << RXEN1) | (1 << TXEN1);
     818:	88 e1       	ldi	r24, 0x18	; 24
     81a:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
     81e:	08 95       	ret

00000820 <Usart_TX>:
}

// uart 통신 데이터 송신
void Usart_TX(uint8_t data)
{
	while(!(UCSR1A & (1 << UDRE1))); // 통신이 준비되면
     820:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     824:	95 ff       	sbrs	r25, 5
     826:	fc cf       	rjmp	.-8      	; 0x820 <Usart_TX>
	
	UDR1 = data; // 데이터 송신
     828:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     82c:	08 95       	ret

0000082e <Print_String>:
	
	return UDR1;
}*/

void Print_String(const char str[]) // 배열 송신
{
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     836:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i])
     838:	02 c0       	rjmp	.+4      	; 0x83e <Print_String+0x10>
	{
		Usart_TX(str[i]);
     83a:	f2 df       	rcall	.-28     	; 0x820 <Usart_TX>
		i++;
     83c:	cf 5f       	subi	r28, 0xFF	; 255
}*/

void Print_String(const char str[]) // 배열 송신
{
	uint8_t i = 0;
	while(str[i])
     83e:	f8 01       	movw	r30, r16
     840:	ec 0f       	add	r30, r28
     842:	f1 1d       	adc	r31, r1
     844:	80 81       	ld	r24, Z
     846:	81 11       	cpse	r24, r1
     848:	f8 cf       	rjmp	.-16     	; 0x83a <Print_String+0xc>
	{
		Usart_TX(str[i]);
		i++;
	}
	
}
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <vfprintf>:
     852:	2f 92       	push	r2
     854:	3f 92       	push	r3
     856:	4f 92       	push	r4
     858:	5f 92       	push	r5
     85a:	6f 92       	push	r6
     85c:	7f 92       	push	r7
     85e:	8f 92       	push	r8
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	60 97       	sbiw	r28, 0x10	; 16
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	7c 01       	movw	r14, r24
     888:	1b 01       	movw	r2, r22
     88a:	6a 01       	movw	r12, r20
     88c:	fc 01       	movw	r30, r24
     88e:	17 82       	std	Z+7, r1	; 0x07
     890:	16 82       	std	Z+6, r1	; 0x06
     892:	83 81       	ldd	r24, Z+3	; 0x03
     894:	81 ff       	sbrs	r24, 1
     896:	2a c3       	rjmp	.+1620   	; 0xeec <vfprintf+0x69a>
     898:	9e 01       	movw	r18, r28
     89a:	2f 5f       	subi	r18, 0xFF	; 255
     89c:	3f 4f       	sbci	r19, 0xFF	; 255
     89e:	39 01       	movw	r6, r18
     8a0:	f7 01       	movw	r30, r14
     8a2:	93 81       	ldd	r25, Z+3	; 0x03
     8a4:	f1 01       	movw	r30, r2
     8a6:	93 fd       	sbrc	r25, 3
     8a8:	85 91       	lpm	r24, Z+
     8aa:	93 ff       	sbrs	r25, 3
     8ac:	81 91       	ld	r24, Z+
     8ae:	1f 01       	movw	r2, r30
     8b0:	88 23       	and	r24, r24
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <vfprintf+0x64>
     8b4:	17 c3       	rjmp	.+1582   	; 0xee4 <vfprintf+0x692>
     8b6:	85 32       	cpi	r24, 0x25	; 37
     8b8:	39 f4       	brne	.+14     	; 0x8c8 <vfprintf+0x76>
     8ba:	93 fd       	sbrc	r25, 3
     8bc:	85 91       	lpm	r24, Z+
     8be:	93 ff       	sbrs	r25, 3
     8c0:	81 91       	ld	r24, Z+
     8c2:	1f 01       	movw	r2, r30
     8c4:	85 32       	cpi	r24, 0x25	; 37
     8c6:	31 f4       	brne	.+12     	; 0x8d4 <vfprintf+0x82>
     8c8:	b7 01       	movw	r22, r14
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	cb d4       	rcall	.+2454   	; 0x1264 <fputc>
     8ce:	56 01       	movw	r10, r12
     8d0:	65 01       	movw	r12, r10
     8d2:	e6 cf       	rjmp	.-52     	; 0x8a0 <vfprintf+0x4e>
     8d4:	10 e0       	ldi	r17, 0x00	; 0
     8d6:	51 2c       	mov	r5, r1
     8d8:	91 2c       	mov	r9, r1
     8da:	ff e1       	ldi	r31, 0x1F	; 31
     8dc:	f9 15       	cp	r31, r9
     8de:	d8 f0       	brcs	.+54     	; 0x916 <vfprintf+0xc4>
     8e0:	8b 32       	cpi	r24, 0x2B	; 43
     8e2:	79 f0       	breq	.+30     	; 0x902 <vfprintf+0xb0>
     8e4:	38 f4       	brcc	.+14     	; 0x8f4 <vfprintf+0xa2>
     8e6:	80 32       	cpi	r24, 0x20	; 32
     8e8:	79 f0       	breq	.+30     	; 0x908 <vfprintf+0xb6>
     8ea:	83 32       	cpi	r24, 0x23	; 35
     8ec:	a1 f4       	brne	.+40     	; 0x916 <vfprintf+0xc4>
     8ee:	f9 2d       	mov	r31, r9
     8f0:	f0 61       	ori	r31, 0x10	; 16
     8f2:	2e c0       	rjmp	.+92     	; 0x950 <vfprintf+0xfe>
     8f4:	8d 32       	cpi	r24, 0x2D	; 45
     8f6:	61 f0       	breq	.+24     	; 0x910 <vfprintf+0xbe>
     8f8:	80 33       	cpi	r24, 0x30	; 48
     8fa:	69 f4       	brne	.+26     	; 0x916 <vfprintf+0xc4>
     8fc:	29 2d       	mov	r18, r9
     8fe:	21 60       	ori	r18, 0x01	; 1
     900:	2d c0       	rjmp	.+90     	; 0x95c <vfprintf+0x10a>
     902:	39 2d       	mov	r19, r9
     904:	32 60       	ori	r19, 0x02	; 2
     906:	93 2e       	mov	r9, r19
     908:	89 2d       	mov	r24, r9
     90a:	84 60       	ori	r24, 0x04	; 4
     90c:	98 2e       	mov	r9, r24
     90e:	2a c0       	rjmp	.+84     	; 0x964 <vfprintf+0x112>
     910:	e9 2d       	mov	r30, r9
     912:	e8 60       	ori	r30, 0x08	; 8
     914:	15 c0       	rjmp	.+42     	; 0x940 <vfprintf+0xee>
     916:	97 fc       	sbrc	r9, 7
     918:	2d c0       	rjmp	.+90     	; 0x974 <vfprintf+0x122>
     91a:	20 ed       	ldi	r18, 0xD0	; 208
     91c:	28 0f       	add	r18, r24
     91e:	2a 30       	cpi	r18, 0x0A	; 10
     920:	88 f4       	brcc	.+34     	; 0x944 <vfprintf+0xf2>
     922:	96 fe       	sbrs	r9, 6
     924:	06 c0       	rjmp	.+12     	; 0x932 <vfprintf+0xe0>
     926:	3a e0       	ldi	r19, 0x0A	; 10
     928:	13 9f       	mul	r17, r19
     92a:	20 0d       	add	r18, r0
     92c:	11 24       	eor	r1, r1
     92e:	12 2f       	mov	r17, r18
     930:	19 c0       	rjmp	.+50     	; 0x964 <vfprintf+0x112>
     932:	8a e0       	ldi	r24, 0x0A	; 10
     934:	58 9e       	mul	r5, r24
     936:	20 0d       	add	r18, r0
     938:	11 24       	eor	r1, r1
     93a:	52 2e       	mov	r5, r18
     93c:	e9 2d       	mov	r30, r9
     93e:	e0 62       	ori	r30, 0x20	; 32
     940:	9e 2e       	mov	r9, r30
     942:	10 c0       	rjmp	.+32     	; 0x964 <vfprintf+0x112>
     944:	8e 32       	cpi	r24, 0x2E	; 46
     946:	31 f4       	brne	.+12     	; 0x954 <vfprintf+0x102>
     948:	96 fc       	sbrc	r9, 6
     94a:	cc c2       	rjmp	.+1432   	; 0xee4 <vfprintf+0x692>
     94c:	f9 2d       	mov	r31, r9
     94e:	f0 64       	ori	r31, 0x40	; 64
     950:	9f 2e       	mov	r9, r31
     952:	08 c0       	rjmp	.+16     	; 0x964 <vfprintf+0x112>
     954:	8c 36       	cpi	r24, 0x6C	; 108
     956:	21 f4       	brne	.+8      	; 0x960 <vfprintf+0x10e>
     958:	29 2d       	mov	r18, r9
     95a:	20 68       	ori	r18, 0x80	; 128
     95c:	92 2e       	mov	r9, r18
     95e:	02 c0       	rjmp	.+4      	; 0x964 <vfprintf+0x112>
     960:	88 36       	cpi	r24, 0x68	; 104
     962:	41 f4       	brne	.+16     	; 0x974 <vfprintf+0x122>
     964:	f1 01       	movw	r30, r2
     966:	93 fd       	sbrc	r25, 3
     968:	85 91       	lpm	r24, Z+
     96a:	93 ff       	sbrs	r25, 3
     96c:	81 91       	ld	r24, Z+
     96e:	1f 01       	movw	r2, r30
     970:	81 11       	cpse	r24, r1
     972:	b3 cf       	rjmp	.-154    	; 0x8da <vfprintf+0x88>
     974:	9b eb       	ldi	r25, 0xBB	; 187
     976:	98 0f       	add	r25, r24
     978:	93 30       	cpi	r25, 0x03	; 3
     97a:	20 f4       	brcc	.+8      	; 0x984 <vfprintf+0x132>
     97c:	99 2d       	mov	r25, r9
     97e:	90 61       	ori	r25, 0x10	; 16
     980:	80 5e       	subi	r24, 0xE0	; 224
     982:	07 c0       	rjmp	.+14     	; 0x992 <vfprintf+0x140>
     984:	9b e9       	ldi	r25, 0x9B	; 155
     986:	98 0f       	add	r25, r24
     988:	93 30       	cpi	r25, 0x03	; 3
     98a:	08 f0       	brcs	.+2      	; 0x98e <vfprintf+0x13c>
     98c:	59 c1       	rjmp	.+690    	; 0xc40 <vfprintf+0x3ee>
     98e:	99 2d       	mov	r25, r9
     990:	9f 7e       	andi	r25, 0xEF	; 239
     992:	96 ff       	sbrs	r25, 6
     994:	16 e0       	ldi	r17, 0x06	; 6
     996:	9f 73       	andi	r25, 0x3F	; 63
     998:	99 2e       	mov	r9, r25
     99a:	85 36       	cpi	r24, 0x65	; 101
     99c:	19 f4       	brne	.+6      	; 0x9a4 <vfprintf+0x152>
     99e:	90 64       	ori	r25, 0x40	; 64
     9a0:	99 2e       	mov	r9, r25
     9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <vfprintf+0x162>
     9a4:	86 36       	cpi	r24, 0x66	; 102
     9a6:	21 f4       	brne	.+8      	; 0x9b0 <vfprintf+0x15e>
     9a8:	39 2f       	mov	r19, r25
     9aa:	30 68       	ori	r19, 0x80	; 128
     9ac:	93 2e       	mov	r9, r19
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <vfprintf+0x162>
     9b0:	11 11       	cpse	r17, r1
     9b2:	11 50       	subi	r17, 0x01	; 1
     9b4:	97 fe       	sbrs	r9, 7
     9b6:	07 c0       	rjmp	.+14     	; 0x9c6 <vfprintf+0x174>
     9b8:	1c 33       	cpi	r17, 0x3C	; 60
     9ba:	50 f4       	brcc	.+20     	; 0x9d0 <vfprintf+0x17e>
     9bc:	44 24       	eor	r4, r4
     9be:	43 94       	inc	r4
     9c0:	41 0e       	add	r4, r17
     9c2:	27 e0       	ldi	r18, 0x07	; 7
     9c4:	0b c0       	rjmp	.+22     	; 0x9dc <vfprintf+0x18a>
     9c6:	18 30       	cpi	r17, 0x08	; 8
     9c8:	38 f0       	brcs	.+14     	; 0x9d8 <vfprintf+0x186>
     9ca:	27 e0       	ldi	r18, 0x07	; 7
     9cc:	17 e0       	ldi	r17, 0x07	; 7
     9ce:	05 c0       	rjmp	.+10     	; 0x9da <vfprintf+0x188>
     9d0:	27 e0       	ldi	r18, 0x07	; 7
     9d2:	9c e3       	ldi	r25, 0x3C	; 60
     9d4:	49 2e       	mov	r4, r25
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0x18a>
     9d8:	21 2f       	mov	r18, r17
     9da:	41 2c       	mov	r4, r1
     9dc:	56 01       	movw	r10, r12
     9de:	84 e0       	ldi	r24, 0x04	; 4
     9e0:	a8 0e       	add	r10, r24
     9e2:	b1 1c       	adc	r11, r1
     9e4:	f6 01       	movw	r30, r12
     9e6:	60 81       	ld	r22, Z
     9e8:	71 81       	ldd	r23, Z+1	; 0x01
     9ea:	82 81       	ldd	r24, Z+2	; 0x02
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	04 2d       	mov	r16, r4
     9f0:	a3 01       	movw	r20, r6
     9f2:	1e d3       	rcall	.+1596   	; 0x1030 <__ftoa_engine>
     9f4:	6c 01       	movw	r12, r24
     9f6:	f9 81       	ldd	r31, Y+1	; 0x01
     9f8:	fc 87       	std	Y+12, r31	; 0x0c
     9fa:	f0 ff       	sbrs	r31, 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0x1b0>
     9fe:	f3 ff       	sbrs	r31, 3
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <vfprintf+0x1bc>
     a02:	91 fc       	sbrc	r9, 1
     a04:	06 c0       	rjmp	.+12     	; 0xa12 <vfprintf+0x1c0>
     a06:	92 fe       	sbrs	r9, 2
     a08:	06 c0       	rjmp	.+12     	; 0xa16 <vfprintf+0x1c4>
     a0a:	00 e2       	ldi	r16, 0x20	; 32
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <vfprintf+0x1c6>
     a0e:	0d e2       	ldi	r16, 0x2D	; 45
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <vfprintf+0x1c6>
     a12:	0b e2       	ldi	r16, 0x2B	; 43
     a14:	01 c0       	rjmp	.+2      	; 0xa18 <vfprintf+0x1c6>
     a16:	00 e0       	ldi	r16, 0x00	; 0
     a18:	8c 85       	ldd	r24, Y+12	; 0x0c
     a1a:	8c 70       	andi	r24, 0x0C	; 12
     a1c:	19 f0       	breq	.+6      	; 0xa24 <vfprintf+0x1d2>
     a1e:	01 11       	cpse	r16, r1
     a20:	43 c2       	rjmp	.+1158   	; 0xea8 <vfprintf+0x656>
     a22:	80 c2       	rjmp	.+1280   	; 0xf24 <vfprintf+0x6d2>
     a24:	97 fe       	sbrs	r9, 7
     a26:	10 c0       	rjmp	.+32     	; 0xa48 <vfprintf+0x1f6>
     a28:	4c 0c       	add	r4, r12
     a2a:	fc 85       	ldd	r31, Y+12	; 0x0c
     a2c:	f4 ff       	sbrs	r31, 4
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <vfprintf+0x1e6>
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	81 33       	cpi	r24, 0x31	; 49
     a34:	09 f4       	brne	.+2      	; 0xa38 <vfprintf+0x1e6>
     a36:	4a 94       	dec	r4
     a38:	14 14       	cp	r1, r4
     a3a:	74 f5       	brge	.+92     	; 0xa98 <vfprintf+0x246>
     a3c:	28 e0       	ldi	r18, 0x08	; 8
     a3e:	24 15       	cp	r18, r4
     a40:	78 f5       	brcc	.+94     	; 0xaa0 <vfprintf+0x24e>
     a42:	88 e0       	ldi	r24, 0x08	; 8
     a44:	48 2e       	mov	r4, r24
     a46:	2c c0       	rjmp	.+88     	; 0xaa0 <vfprintf+0x24e>
     a48:	96 fc       	sbrc	r9, 6
     a4a:	2a c0       	rjmp	.+84     	; 0xaa0 <vfprintf+0x24e>
     a4c:	81 2f       	mov	r24, r17
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	8c 15       	cp	r24, r12
     a52:	9d 05       	cpc	r25, r13
     a54:	9c f0       	brlt	.+38     	; 0xa7c <vfprintf+0x22a>
     a56:	3c ef       	ldi	r19, 0xFC	; 252
     a58:	c3 16       	cp	r12, r19
     a5a:	3f ef       	ldi	r19, 0xFF	; 255
     a5c:	d3 06       	cpc	r13, r19
     a5e:	74 f0       	brlt	.+28     	; 0xa7c <vfprintf+0x22a>
     a60:	89 2d       	mov	r24, r9
     a62:	80 68       	ori	r24, 0x80	; 128
     a64:	98 2e       	mov	r9, r24
     a66:	0a c0       	rjmp	.+20     	; 0xa7c <vfprintf+0x22a>
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	ec 0f       	add	r30, r28
     a6e:	fd 1f       	adc	r31, r29
     a70:	e1 0f       	add	r30, r17
     a72:	f1 1d       	adc	r31, r1
     a74:	80 81       	ld	r24, Z
     a76:	80 33       	cpi	r24, 0x30	; 48
     a78:	19 f4       	brne	.+6      	; 0xa80 <vfprintf+0x22e>
     a7a:	11 50       	subi	r17, 0x01	; 1
     a7c:	11 11       	cpse	r17, r1
     a7e:	f4 cf       	rjmp	.-24     	; 0xa68 <vfprintf+0x216>
     a80:	97 fe       	sbrs	r9, 7
     a82:	0e c0       	rjmp	.+28     	; 0xaa0 <vfprintf+0x24e>
     a84:	44 24       	eor	r4, r4
     a86:	43 94       	inc	r4
     a88:	41 0e       	add	r4, r17
     a8a:	81 2f       	mov	r24, r17
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	c8 16       	cp	r12, r24
     a90:	d9 06       	cpc	r13, r25
     a92:	2c f4       	brge	.+10     	; 0xa9e <vfprintf+0x24c>
     a94:	1c 19       	sub	r17, r12
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <vfprintf+0x24e>
     a98:	44 24       	eor	r4, r4
     a9a:	43 94       	inc	r4
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <vfprintf+0x24e>
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	97 fe       	sbrs	r9, 7
     aa2:	06 c0       	rjmp	.+12     	; 0xab0 <vfprintf+0x25e>
     aa4:	1c 14       	cp	r1, r12
     aa6:	1d 04       	cpc	r1, r13
     aa8:	34 f4       	brge	.+12     	; 0xab6 <vfprintf+0x264>
     aaa:	c6 01       	movw	r24, r12
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	05 c0       	rjmp	.+10     	; 0xaba <vfprintf+0x268>
     ab0:	85 e0       	ldi	r24, 0x05	; 5
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x268>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	01 11       	cpse	r16, r1
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	11 23       	and	r17, r17
     ac0:	31 f0       	breq	.+12     	; 0xace <vfprintf+0x27c>
     ac2:	21 2f       	mov	r18, r17
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	2f 5f       	subi	r18, 0xFF	; 255
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	82 0f       	add	r24, r18
     acc:	93 1f       	adc	r25, r19
     ace:	25 2d       	mov	r18, r5
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	82 17       	cp	r24, r18
     ad4:	93 07       	cpc	r25, r19
     ad6:	14 f4       	brge	.+4      	; 0xadc <vfprintf+0x28a>
     ad8:	58 1a       	sub	r5, r24
     ada:	01 c0       	rjmp	.+2      	; 0xade <vfprintf+0x28c>
     adc:	51 2c       	mov	r5, r1
     ade:	89 2d       	mov	r24, r9
     ae0:	89 70       	andi	r24, 0x09	; 9
     ae2:	41 f4       	brne	.+16     	; 0xaf4 <vfprintf+0x2a2>
     ae4:	55 20       	and	r5, r5
     ae6:	31 f0       	breq	.+12     	; 0xaf4 <vfprintf+0x2a2>
     ae8:	b7 01       	movw	r22, r14
     aea:	80 e2       	ldi	r24, 0x20	; 32
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	ba d3       	rcall	.+1908   	; 0x1264 <fputc>
     af0:	5a 94       	dec	r5
     af2:	f8 cf       	rjmp	.-16     	; 0xae4 <vfprintf+0x292>
     af4:	00 23       	and	r16, r16
     af6:	21 f0       	breq	.+8      	; 0xb00 <vfprintf+0x2ae>
     af8:	b7 01       	movw	r22, r14
     afa:	80 2f       	mov	r24, r16
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	b2 d3       	rcall	.+1892   	; 0x1264 <fputc>
     b00:	93 fc       	sbrc	r9, 3
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <vfprintf+0x2c2>
     b04:	55 20       	and	r5, r5
     b06:	31 f0       	breq	.+12     	; 0xb14 <vfprintf+0x2c2>
     b08:	b7 01       	movw	r22, r14
     b0a:	80 e3       	ldi	r24, 0x30	; 48
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	aa d3       	rcall	.+1876   	; 0x1264 <fputc>
     b10:	5a 94       	dec	r5
     b12:	f8 cf       	rjmp	.-16     	; 0xb04 <vfprintf+0x2b2>
     b14:	97 fe       	sbrs	r9, 7
     b16:	4a c0       	rjmp	.+148    	; 0xbac <vfprintf+0x35a>
     b18:	46 01       	movw	r8, r12
     b1a:	d7 fe       	sbrs	r13, 7
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <vfprintf+0x2d0>
     b1e:	81 2c       	mov	r8, r1
     b20:	91 2c       	mov	r9, r1
     b22:	c6 01       	movw	r24, r12
     b24:	88 19       	sub	r24, r8
     b26:	99 09       	sbc	r25, r9
     b28:	f3 01       	movw	r30, r6
     b2a:	e8 0f       	add	r30, r24
     b2c:	f9 1f       	adc	r31, r25
     b2e:	fe 87       	std	Y+14, r31	; 0x0e
     b30:	ed 87       	std	Y+13, r30	; 0x0d
     b32:	96 01       	movw	r18, r12
     b34:	24 19       	sub	r18, r4
     b36:	31 09       	sbc	r19, r1
     b38:	38 8b       	std	Y+16, r19	; 0x10
     b3a:	2f 87       	std	Y+15, r18	; 0x0f
     b3c:	01 2f       	mov	r16, r17
     b3e:	10 e0       	ldi	r17, 0x00	; 0
     b40:	11 95       	neg	r17
     b42:	01 95       	neg	r16
     b44:	11 09       	sbc	r17, r1
     b46:	3f ef       	ldi	r19, 0xFF	; 255
     b48:	83 16       	cp	r8, r19
     b4a:	93 06       	cpc	r9, r19
     b4c:	21 f4       	brne	.+8      	; 0xb56 <vfprintf+0x304>
     b4e:	b7 01       	movw	r22, r14
     b50:	8e e2       	ldi	r24, 0x2E	; 46
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	87 d3       	rcall	.+1806   	; 0x1264 <fputc>
     b56:	c8 14       	cp	r12, r8
     b58:	d9 04       	cpc	r13, r9
     b5a:	4c f0       	brlt	.+18     	; 0xb6e <vfprintf+0x31c>
     b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b5e:	98 89       	ldd	r25, Y+16	; 0x10
     b60:	88 15       	cp	r24, r8
     b62:	99 05       	cpc	r25, r9
     b64:	24 f4       	brge	.+8      	; 0xb6e <vfprintf+0x31c>
     b66:	ed 85       	ldd	r30, Y+13	; 0x0d
     b68:	fe 85       	ldd	r31, Y+14	; 0x0e
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <vfprintf+0x31e>
     b6e:	80 e3       	ldi	r24, 0x30	; 48
     b70:	f1 e0       	ldi	r31, 0x01	; 1
     b72:	8f 1a       	sub	r8, r31
     b74:	91 08       	sbc	r9, r1
     b76:	2d 85       	ldd	r18, Y+13	; 0x0d
     b78:	3e 85       	ldd	r19, Y+14	; 0x0e
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	3e 87       	std	Y+14, r19	; 0x0e
     b80:	2d 87       	std	Y+13, r18	; 0x0d
     b82:	80 16       	cp	r8, r16
     b84:	91 06       	cpc	r9, r17
     b86:	24 f0       	brlt	.+8      	; 0xb90 <vfprintf+0x33e>
     b88:	b7 01       	movw	r22, r14
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	6b d3       	rcall	.+1750   	; 0x1264 <fputc>
     b8e:	db cf       	rjmp	.-74     	; 0xb46 <vfprintf+0x2f4>
     b90:	c8 14       	cp	r12, r8
     b92:	d9 04       	cpc	r13, r9
     b94:	41 f4       	brne	.+16     	; 0xba6 <vfprintf+0x354>
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	96 33       	cpi	r25, 0x36	; 54
     b9a:	20 f4       	brcc	.+8      	; 0xba4 <vfprintf+0x352>
     b9c:	95 33       	cpi	r25, 0x35	; 53
     b9e:	19 f4       	brne	.+6      	; 0xba6 <vfprintf+0x354>
     ba0:	3c 85       	ldd	r19, Y+12	; 0x0c
     ba2:	34 ff       	sbrs	r19, 4
     ba4:	81 e3       	ldi	r24, 0x31	; 49
     ba6:	b7 01       	movw	r22, r14
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	48 c0       	rjmp	.+144    	; 0xc3c <vfprintf+0x3ea>
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	81 33       	cpi	r24, 0x31	; 49
     bb0:	19 f0       	breq	.+6      	; 0xbb8 <vfprintf+0x366>
     bb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb4:	9f 7e       	andi	r25, 0xEF	; 239
     bb6:	9c 87       	std	Y+12, r25	; 0x0c
     bb8:	b7 01       	movw	r22, r14
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	53 d3       	rcall	.+1702   	; 0x1264 <fputc>
     bbe:	11 11       	cpse	r17, r1
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <vfprintf+0x37a>
     bc2:	94 fc       	sbrc	r9, 4
     bc4:	16 c0       	rjmp	.+44     	; 0xbf2 <vfprintf+0x3a0>
     bc6:	85 e6       	ldi	r24, 0x65	; 101
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	15 c0       	rjmp	.+42     	; 0xbf6 <vfprintf+0x3a4>
     bcc:	b7 01       	movw	r22, r14
     bce:	8e e2       	ldi	r24, 0x2E	; 46
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	48 d3       	rcall	.+1680   	; 0x1264 <fputc>
     bd4:	1e 5f       	subi	r17, 0xFE	; 254
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	01 e0       	ldi	r16, 0x01	; 1
     bda:	08 0f       	add	r16, r24
     bdc:	f3 01       	movw	r30, r6
     bde:	e8 0f       	add	r30, r24
     be0:	f1 1d       	adc	r31, r1
     be2:	80 81       	ld	r24, Z
     be4:	b7 01       	movw	r22, r14
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	3d d3       	rcall	.+1658   	; 0x1264 <fputc>
     bea:	80 2f       	mov	r24, r16
     bec:	01 13       	cpse	r16, r17
     bee:	f4 cf       	rjmp	.-24     	; 0xbd8 <vfprintf+0x386>
     bf0:	e8 cf       	rjmp	.-48     	; 0xbc2 <vfprintf+0x370>
     bf2:	85 e4       	ldi	r24, 0x45	; 69
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	b7 01       	movw	r22, r14
     bf8:	35 d3       	rcall	.+1642   	; 0x1264 <fputc>
     bfa:	d7 fc       	sbrc	r13, 7
     bfc:	06 c0       	rjmp	.+12     	; 0xc0a <vfprintf+0x3b8>
     bfe:	c1 14       	cp	r12, r1
     c00:	d1 04       	cpc	r13, r1
     c02:	41 f4       	brne	.+16     	; 0xc14 <vfprintf+0x3c2>
     c04:	ec 85       	ldd	r30, Y+12	; 0x0c
     c06:	e4 ff       	sbrs	r30, 4
     c08:	05 c0       	rjmp	.+10     	; 0xc14 <vfprintf+0x3c2>
     c0a:	d1 94       	neg	r13
     c0c:	c1 94       	neg	r12
     c0e:	d1 08       	sbc	r13, r1
     c10:	8d e2       	ldi	r24, 0x2D	; 45
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <vfprintf+0x3c4>
     c14:	8b e2       	ldi	r24, 0x2B	; 43
     c16:	b7 01       	movw	r22, r14
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	24 d3       	rcall	.+1608   	; 0x1264 <fputc>
     c1c:	80 e3       	ldi	r24, 0x30	; 48
     c1e:	2a e0       	ldi	r18, 0x0A	; 10
     c20:	c2 16       	cp	r12, r18
     c22:	d1 04       	cpc	r13, r1
     c24:	2c f0       	brlt	.+10     	; 0xc30 <vfprintf+0x3de>
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	fa e0       	ldi	r31, 0x0A	; 10
     c2a:	cf 1a       	sub	r12, r31
     c2c:	d1 08       	sbc	r13, r1
     c2e:	f7 cf       	rjmp	.-18     	; 0xc1e <vfprintf+0x3cc>
     c30:	b7 01       	movw	r22, r14
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	17 d3       	rcall	.+1582   	; 0x1264 <fputc>
     c36:	b7 01       	movw	r22, r14
     c38:	c6 01       	movw	r24, r12
     c3a:	c0 96       	adiw	r24, 0x30	; 48
     c3c:	13 d3       	rcall	.+1574   	; 0x1264 <fputc>
     c3e:	49 c1       	rjmp	.+658    	; 0xed2 <vfprintf+0x680>
     c40:	83 36       	cpi	r24, 0x63	; 99
     c42:	31 f0       	breq	.+12     	; 0xc50 <vfprintf+0x3fe>
     c44:	83 37       	cpi	r24, 0x73	; 115
     c46:	79 f0       	breq	.+30     	; 0xc66 <vfprintf+0x414>
     c48:	83 35       	cpi	r24, 0x53	; 83
     c4a:	09 f0       	breq	.+2      	; 0xc4e <vfprintf+0x3fc>
     c4c:	52 c0       	rjmp	.+164    	; 0xcf2 <vfprintf+0x4a0>
     c4e:	1f c0       	rjmp	.+62     	; 0xc8e <vfprintf+0x43c>
     c50:	56 01       	movw	r10, r12
     c52:	32 e0       	ldi	r19, 0x02	; 2
     c54:	a3 0e       	add	r10, r19
     c56:	b1 1c       	adc	r11, r1
     c58:	f6 01       	movw	r30, r12
     c5a:	80 81       	ld	r24, Z
     c5c:	89 83       	std	Y+1, r24	; 0x01
     c5e:	01 e0       	ldi	r16, 0x01	; 1
     c60:	10 e0       	ldi	r17, 0x00	; 0
     c62:	63 01       	movw	r12, r6
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <vfprintf+0x436>
     c66:	56 01       	movw	r10, r12
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	af 0e       	add	r10, r31
     c6c:	b1 1c       	adc	r11, r1
     c6e:	f6 01       	movw	r30, r12
     c70:	c0 80       	ld	r12, Z
     c72:	d1 80       	ldd	r13, Z+1	; 0x01
     c74:	96 fe       	sbrs	r9, 6
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x42c>
     c78:	61 2f       	mov	r22, r17
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x430>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	c6 01       	movw	r24, r12
     c84:	c1 d2       	rcall	.+1410   	; 0x1208 <strnlen>
     c86:	8c 01       	movw	r16, r24
     c88:	f9 2d       	mov	r31, r9
     c8a:	ff 77       	andi	r31, 0x7F	; 127
     c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <vfprintf+0x462>
     c8e:	56 01       	movw	r10, r12
     c90:	22 e0       	ldi	r18, 0x02	; 2
     c92:	a2 0e       	add	r10, r18
     c94:	b1 1c       	adc	r11, r1
     c96:	f6 01       	movw	r30, r12
     c98:	c0 80       	ld	r12, Z
     c9a:	d1 80       	ldd	r13, Z+1	; 0x01
     c9c:	96 fe       	sbrs	r9, 6
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <vfprintf+0x454>
     ca0:	61 2f       	mov	r22, r17
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x458>
     ca6:	6f ef       	ldi	r22, 0xFF	; 255
     ca8:	7f ef       	ldi	r23, 0xFF	; 255
     caa:	c6 01       	movw	r24, r12
     cac:	99 d2       	rcall	.+1330   	; 0x11e0 <strnlen_P>
     cae:	8c 01       	movw	r16, r24
     cb0:	f9 2d       	mov	r31, r9
     cb2:	f0 68       	ori	r31, 0x80	; 128
     cb4:	9f 2e       	mov	r9, r31
     cb6:	f3 fd       	sbrc	r31, 3
     cb8:	18 c0       	rjmp	.+48     	; 0xcea <vfprintf+0x498>
     cba:	85 2d       	mov	r24, r5
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	08 17       	cp	r16, r24
     cc0:	19 07       	cpc	r17, r25
     cc2:	98 f4       	brcc	.+38     	; 0xcea <vfprintf+0x498>
     cc4:	b7 01       	movw	r22, r14
     cc6:	80 e2       	ldi	r24, 0x20	; 32
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	cc d2       	rcall	.+1432   	; 0x1264 <fputc>
     ccc:	5a 94       	dec	r5
     cce:	f5 cf       	rjmp	.-22     	; 0xcba <vfprintf+0x468>
     cd0:	f6 01       	movw	r30, r12
     cd2:	97 fc       	sbrc	r9, 7
     cd4:	85 91       	lpm	r24, Z+
     cd6:	97 fe       	sbrs	r9, 7
     cd8:	81 91       	ld	r24, Z+
     cda:	6f 01       	movw	r12, r30
     cdc:	b7 01       	movw	r22, r14
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	c1 d2       	rcall	.+1410   	; 0x1264 <fputc>
     ce2:	51 10       	cpse	r5, r1
     ce4:	5a 94       	dec	r5
     ce6:	01 50       	subi	r16, 0x01	; 1
     ce8:	11 09       	sbc	r17, r1
     cea:	01 15       	cp	r16, r1
     cec:	11 05       	cpc	r17, r1
     cee:	81 f7       	brne	.-32     	; 0xcd0 <vfprintf+0x47e>
     cf0:	f0 c0       	rjmp	.+480    	; 0xed2 <vfprintf+0x680>
     cf2:	84 36       	cpi	r24, 0x64	; 100
     cf4:	11 f0       	breq	.+4      	; 0xcfa <vfprintf+0x4a8>
     cf6:	89 36       	cpi	r24, 0x69	; 105
     cf8:	59 f5       	brne	.+86     	; 0xd50 <vfprintf+0x4fe>
     cfa:	56 01       	movw	r10, r12
     cfc:	97 fe       	sbrs	r9, 7
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <vfprintf+0x4c0>
     d00:	24 e0       	ldi	r18, 0x04	; 4
     d02:	a2 0e       	add	r10, r18
     d04:	b1 1c       	adc	r11, r1
     d06:	f6 01       	movw	r30, r12
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <vfprintf+0x4d4>
     d12:	f2 e0       	ldi	r31, 0x02	; 2
     d14:	af 0e       	add	r10, r31
     d16:	b1 1c       	adc	r11, r1
     d18:	f6 01       	movw	r30, r12
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	07 2e       	mov	r0, r23
     d20:	00 0c       	add	r0, r0
     d22:	88 0b       	sbc	r24, r24
     d24:	99 0b       	sbc	r25, r25
     d26:	f9 2d       	mov	r31, r9
     d28:	ff 76       	andi	r31, 0x6F	; 111
     d2a:	9f 2e       	mov	r9, r31
     d2c:	97 ff       	sbrs	r25, 7
     d2e:	09 c0       	rjmp	.+18     	; 0xd42 <vfprintf+0x4f0>
     d30:	90 95       	com	r25
     d32:	80 95       	com	r24
     d34:	70 95       	com	r23
     d36:	61 95       	neg	r22
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	8f 4f       	sbci	r24, 0xFF	; 255
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	f0 68       	ori	r31, 0x80	; 128
     d40:	9f 2e       	mov	r9, r31
     d42:	2a e0       	ldi	r18, 0x0A	; 10
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	a3 01       	movw	r20, r6
     d48:	c9 d2       	rcall	.+1426   	; 0x12dc <__ultoa_invert>
     d4a:	c8 2e       	mov	r12, r24
     d4c:	c6 18       	sub	r12, r6
     d4e:	3e c0       	rjmp	.+124    	; 0xdcc <vfprintf+0x57a>
     d50:	09 2d       	mov	r16, r9
     d52:	85 37       	cpi	r24, 0x75	; 117
     d54:	21 f4       	brne	.+8      	; 0xd5e <vfprintf+0x50c>
     d56:	0f 7e       	andi	r16, 0xEF	; 239
     d58:	2a e0       	ldi	r18, 0x0A	; 10
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	1d c0       	rjmp	.+58     	; 0xd98 <vfprintf+0x546>
     d5e:	09 7f       	andi	r16, 0xF9	; 249
     d60:	8f 36       	cpi	r24, 0x6F	; 111
     d62:	91 f0       	breq	.+36     	; 0xd88 <vfprintf+0x536>
     d64:	18 f4       	brcc	.+6      	; 0xd6c <vfprintf+0x51a>
     d66:	88 35       	cpi	r24, 0x58	; 88
     d68:	59 f0       	breq	.+22     	; 0xd80 <vfprintf+0x52e>
     d6a:	bc c0       	rjmp	.+376    	; 0xee4 <vfprintf+0x692>
     d6c:	80 37       	cpi	r24, 0x70	; 112
     d6e:	19 f0       	breq	.+6      	; 0xd76 <vfprintf+0x524>
     d70:	88 37       	cpi	r24, 0x78	; 120
     d72:	11 f0       	breq	.+4      	; 0xd78 <vfprintf+0x526>
     d74:	b7 c0       	rjmp	.+366    	; 0xee4 <vfprintf+0x692>
     d76:	00 61       	ori	r16, 0x10	; 16
     d78:	04 ff       	sbrs	r16, 4
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <vfprintf+0x53c>
     d7c:	04 60       	ori	r16, 0x04	; 4
     d7e:	07 c0       	rjmp	.+14     	; 0xd8e <vfprintf+0x53c>
     d80:	94 fe       	sbrs	r9, 4
     d82:	08 c0       	rjmp	.+16     	; 0xd94 <vfprintf+0x542>
     d84:	06 60       	ori	r16, 0x06	; 6
     d86:	06 c0       	rjmp	.+12     	; 0xd94 <vfprintf+0x542>
     d88:	28 e0       	ldi	r18, 0x08	; 8
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <vfprintf+0x546>
     d8e:	20 e1       	ldi	r18, 0x10	; 16
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <vfprintf+0x546>
     d94:	20 e1       	ldi	r18, 0x10	; 16
     d96:	32 e0       	ldi	r19, 0x02	; 2
     d98:	56 01       	movw	r10, r12
     d9a:	07 ff       	sbrs	r16, 7
     d9c:	09 c0       	rjmp	.+18     	; 0xdb0 <vfprintf+0x55e>
     d9e:	84 e0       	ldi	r24, 0x04	; 4
     da0:	a8 0e       	add	r10, r24
     da2:	b1 1c       	adc	r11, r1
     da4:	f6 01       	movw	r30, r12
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	08 c0       	rjmp	.+16     	; 0xdc0 <vfprintf+0x56e>
     db0:	f2 e0       	ldi	r31, 0x02	; 2
     db2:	af 0e       	add	r10, r31
     db4:	b1 1c       	adc	r11, r1
     db6:	f6 01       	movw	r30, r12
     db8:	60 81       	ld	r22, Z
     dba:	71 81       	ldd	r23, Z+1	; 0x01
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a3 01       	movw	r20, r6
     dc2:	8c d2       	rcall	.+1304   	; 0x12dc <__ultoa_invert>
     dc4:	c8 2e       	mov	r12, r24
     dc6:	c6 18       	sub	r12, r6
     dc8:	0f 77       	andi	r16, 0x7F	; 127
     dca:	90 2e       	mov	r9, r16
     dcc:	96 fe       	sbrs	r9, 6
     dce:	0b c0       	rjmp	.+22     	; 0xde6 <vfprintf+0x594>
     dd0:	09 2d       	mov	r16, r9
     dd2:	0e 7f       	andi	r16, 0xFE	; 254
     dd4:	c1 16       	cp	r12, r17
     dd6:	50 f4       	brcc	.+20     	; 0xdec <vfprintf+0x59a>
     dd8:	94 fe       	sbrs	r9, 4
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <vfprintf+0x59e>
     ddc:	92 fc       	sbrc	r9, 2
     dde:	08 c0       	rjmp	.+16     	; 0xdf0 <vfprintf+0x59e>
     de0:	09 2d       	mov	r16, r9
     de2:	0e 7e       	andi	r16, 0xEE	; 238
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <vfprintf+0x59e>
     de6:	dc 2c       	mov	r13, r12
     de8:	09 2d       	mov	r16, r9
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <vfprintf+0x5a0>
     dec:	dc 2c       	mov	r13, r12
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <vfprintf+0x5a0>
     df0:	d1 2e       	mov	r13, r17
     df2:	04 ff       	sbrs	r16, 4
     df4:	0d c0       	rjmp	.+26     	; 0xe10 <vfprintf+0x5be>
     df6:	fe 01       	movw	r30, r28
     df8:	ec 0d       	add	r30, r12
     dfa:	f1 1d       	adc	r31, r1
     dfc:	80 81       	ld	r24, Z
     dfe:	80 33       	cpi	r24, 0x30	; 48
     e00:	11 f4       	brne	.+4      	; 0xe06 <vfprintf+0x5b4>
     e02:	09 7e       	andi	r16, 0xE9	; 233
     e04:	09 c0       	rjmp	.+18     	; 0xe18 <vfprintf+0x5c6>
     e06:	02 ff       	sbrs	r16, 2
     e08:	06 c0       	rjmp	.+12     	; 0xe16 <vfprintf+0x5c4>
     e0a:	d3 94       	inc	r13
     e0c:	d3 94       	inc	r13
     e0e:	04 c0       	rjmp	.+8      	; 0xe18 <vfprintf+0x5c6>
     e10:	80 2f       	mov	r24, r16
     e12:	86 78       	andi	r24, 0x86	; 134
     e14:	09 f0       	breq	.+2      	; 0xe18 <vfprintf+0x5c6>
     e16:	d3 94       	inc	r13
     e18:	03 fd       	sbrc	r16, 3
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <vfprintf+0x5ea>
     e1c:	00 ff       	sbrs	r16, 0
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <vfprintf+0x5da>
     e20:	1c 2d       	mov	r17, r12
     e22:	d5 14       	cp	r13, r5
     e24:	78 f4       	brcc	.+30     	; 0xe44 <vfprintf+0x5f2>
     e26:	15 0d       	add	r17, r5
     e28:	1d 19       	sub	r17, r13
     e2a:	0c c0       	rjmp	.+24     	; 0xe44 <vfprintf+0x5f2>
     e2c:	d5 14       	cp	r13, r5
     e2e:	50 f4       	brcc	.+20     	; 0xe44 <vfprintf+0x5f2>
     e30:	b7 01       	movw	r22, r14
     e32:	80 e2       	ldi	r24, 0x20	; 32
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	16 d2       	rcall	.+1068   	; 0x1264 <fputc>
     e38:	d3 94       	inc	r13
     e3a:	f8 cf       	rjmp	.-16     	; 0xe2c <vfprintf+0x5da>
     e3c:	d5 14       	cp	r13, r5
     e3e:	10 f4       	brcc	.+4      	; 0xe44 <vfprintf+0x5f2>
     e40:	5d 18       	sub	r5, r13
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <vfprintf+0x5f4>
     e44:	51 2c       	mov	r5, r1
     e46:	04 ff       	sbrs	r16, 4
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <vfprintf+0x616>
     e4a:	b7 01       	movw	r22, r14
     e4c:	80 e3       	ldi	r24, 0x30	; 48
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	09 d2       	rcall	.+1042   	; 0x1264 <fputc>
     e52:	02 ff       	sbrs	r16, 2
     e54:	16 c0       	rjmp	.+44     	; 0xe82 <vfprintf+0x630>
     e56:	01 fd       	sbrc	r16, 1
     e58:	03 c0       	rjmp	.+6      	; 0xe60 <vfprintf+0x60e>
     e5a:	88 e7       	ldi	r24, 0x78	; 120
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0x612>
     e60:	88 e5       	ldi	r24, 0x58	; 88
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	b7 01       	movw	r22, r14
     e66:	0c c0       	rjmp	.+24     	; 0xe80 <vfprintf+0x62e>
     e68:	80 2f       	mov	r24, r16
     e6a:	86 78       	andi	r24, 0x86	; 134
     e6c:	51 f0       	breq	.+20     	; 0xe82 <vfprintf+0x630>
     e6e:	01 ff       	sbrs	r16, 1
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <vfprintf+0x624>
     e72:	8b e2       	ldi	r24, 0x2B	; 43
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <vfprintf+0x626>
     e76:	80 e2       	ldi	r24, 0x20	; 32
     e78:	07 fd       	sbrc	r16, 7
     e7a:	8d e2       	ldi	r24, 0x2D	; 45
     e7c:	b7 01       	movw	r22, r14
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	f1 d1       	rcall	.+994    	; 0x1264 <fputc>
     e82:	c1 16       	cp	r12, r17
     e84:	30 f4       	brcc	.+12     	; 0xe92 <vfprintf+0x640>
     e86:	b7 01       	movw	r22, r14
     e88:	80 e3       	ldi	r24, 0x30	; 48
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	eb d1       	rcall	.+982    	; 0x1264 <fputc>
     e8e:	11 50       	subi	r17, 0x01	; 1
     e90:	f8 cf       	rjmp	.-16     	; 0xe82 <vfprintf+0x630>
     e92:	ca 94       	dec	r12
     e94:	f3 01       	movw	r30, r6
     e96:	ec 0d       	add	r30, r12
     e98:	f1 1d       	adc	r31, r1
     e9a:	80 81       	ld	r24, Z
     e9c:	b7 01       	movw	r22, r14
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	e1 d1       	rcall	.+962    	; 0x1264 <fputc>
     ea2:	c1 10       	cpse	r12, r1
     ea4:	f6 cf       	rjmp	.-20     	; 0xe92 <vfprintf+0x640>
     ea6:	15 c0       	rjmp	.+42     	; 0xed2 <vfprintf+0x680>
     ea8:	f4 e0       	ldi	r31, 0x04	; 4
     eaa:	f5 15       	cp	r31, r5
     eac:	50 f5       	brcc	.+84     	; 0xf02 <vfprintf+0x6b0>
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	58 1a       	sub	r5, r24
     eb2:	93 fe       	sbrs	r9, 3
     eb4:	1e c0       	rjmp	.+60     	; 0xef2 <vfprintf+0x6a0>
     eb6:	01 11       	cpse	r16, r1
     eb8:	25 c0       	rjmp	.+74     	; 0xf04 <vfprintf+0x6b2>
     eba:	2c 85       	ldd	r18, Y+12	; 0x0c
     ebc:	23 ff       	sbrs	r18, 3
     ebe:	27 c0       	rjmp	.+78     	; 0xf0e <vfprintf+0x6bc>
     ec0:	0c e8       	ldi	r16, 0x8C	; 140
     ec2:	10 e0       	ldi	r17, 0x00	; 0
     ec4:	39 2d       	mov	r19, r9
     ec6:	30 71       	andi	r19, 0x10	; 16
     ec8:	93 2e       	mov	r9, r19
     eca:	f8 01       	movw	r30, r16
     ecc:	84 91       	lpm	r24, Z
     ece:	81 11       	cpse	r24, r1
     ed0:	21 c0       	rjmp	.+66     	; 0xf14 <vfprintf+0x6c2>
     ed2:	55 20       	and	r5, r5
     ed4:	09 f4       	brne	.+2      	; 0xed8 <vfprintf+0x686>
     ed6:	fc cc       	rjmp	.-1544   	; 0x8d0 <vfprintf+0x7e>
     ed8:	b7 01       	movw	r22, r14
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	c2 d1       	rcall	.+900    	; 0x1264 <fputc>
     ee0:	5a 94       	dec	r5
     ee2:	f7 cf       	rjmp	.-18     	; 0xed2 <vfprintf+0x680>
     ee4:	f7 01       	movw	r30, r14
     ee6:	86 81       	ldd	r24, Z+6	; 0x06
     ee8:	97 81       	ldd	r25, Z+7	; 0x07
     eea:	23 c0       	rjmp	.+70     	; 0xf32 <vfprintf+0x6e0>
     eec:	8f ef       	ldi	r24, 0xFF	; 255
     eee:	9f ef       	ldi	r25, 0xFF	; 255
     ef0:	20 c0       	rjmp	.+64     	; 0xf32 <vfprintf+0x6e0>
     ef2:	b7 01       	movw	r22, r14
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	b5 d1       	rcall	.+874    	; 0x1264 <fputc>
     efa:	5a 94       	dec	r5
     efc:	51 10       	cpse	r5, r1
     efe:	f9 cf       	rjmp	.-14     	; 0xef2 <vfprintf+0x6a0>
     f00:	da cf       	rjmp	.-76     	; 0xeb6 <vfprintf+0x664>
     f02:	51 2c       	mov	r5, r1
     f04:	b7 01       	movw	r22, r14
     f06:	80 2f       	mov	r24, r16
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	ac d1       	rcall	.+856    	; 0x1264 <fputc>
     f0c:	d6 cf       	rjmp	.-84     	; 0xeba <vfprintf+0x668>
     f0e:	00 e9       	ldi	r16, 0x90	; 144
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	d8 cf       	rjmp	.-80     	; 0xec4 <vfprintf+0x672>
     f14:	91 10       	cpse	r9, r1
     f16:	80 52       	subi	r24, 0x20	; 32
     f18:	b7 01       	movw	r22, r14
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a3 d1       	rcall	.+838    	; 0x1264 <fputc>
     f1e:	0f 5f       	subi	r16, 0xFF	; 255
     f20:	1f 4f       	sbci	r17, 0xFF	; 255
     f22:	d3 cf       	rjmp	.-90     	; 0xeca <vfprintf+0x678>
     f24:	23 e0       	ldi	r18, 0x03	; 3
     f26:	25 15       	cp	r18, r5
     f28:	10 f4       	brcc	.+4      	; 0xf2e <vfprintf+0x6dc>
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	c1 cf       	rjmp	.-126    	; 0xeb0 <vfprintf+0x65e>
     f2e:	51 2c       	mov	r5, r1
     f30:	c4 cf       	rjmp	.-120    	; 0xeba <vfprintf+0x668>
     f32:	60 96       	adiw	r28, 0x10	; 16
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	7f 90       	pop	r7
     f58:	6f 90       	pop	r6
     f5a:	5f 90       	pop	r5
     f5c:	4f 90       	pop	r4
     f5e:	3f 90       	pop	r3
     f60:	2f 90       	pop	r2
     f62:	08 95       	ret

00000f64 <__mulsi3>:
     f64:	db 01       	movw	r26, r22
     f66:	8f 93       	push	r24
     f68:	9f 93       	push	r25
     f6a:	27 d0       	rcall	.+78     	; 0xfba <__muluhisi3>
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	a2 9f       	mul	r26, r18
     f72:	80 0d       	add	r24, r0
     f74:	91 1d       	adc	r25, r1
     f76:	a3 9f       	mul	r26, r19
     f78:	90 0d       	add	r25, r0
     f7a:	b2 9f       	mul	r27, r18
     f7c:	90 0d       	add	r25, r0
     f7e:	11 24       	eor	r1, r1
     f80:	08 95       	ret

00000f82 <__divmodsi4>:
     f82:	05 2e       	mov	r0, r21
     f84:	97 fb       	bst	r25, 7
     f86:	16 f4       	brtc	.+4      	; 0xf8c <__divmodsi4+0xa>
     f88:	00 94       	com	r0
     f8a:	0f d0       	rcall	.+30     	; 0xfaa <__negsi2>
     f8c:	57 fd       	sbrc	r21, 7
     f8e:	05 d0       	rcall	.+10     	; 0xf9a <__divmodsi4_neg2>
     f90:	1e d0       	rcall	.+60     	; 0xfce <__udivmodsi4>
     f92:	07 fc       	sbrc	r0, 7
     f94:	02 d0       	rcall	.+4      	; 0xf9a <__divmodsi4_neg2>
     f96:	46 f4       	brtc	.+16     	; 0xfa8 <__divmodsi4_exit>
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <__negsi2>

00000f9a <__divmodsi4_neg2>:
     f9a:	50 95       	com	r21
     f9c:	40 95       	com	r20
     f9e:	30 95       	com	r19
     fa0:	21 95       	neg	r18
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	4f 4f       	sbci	r20, 0xFF	; 255
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255

00000fa8 <__divmodsi4_exit>:
     fa8:	08 95       	ret

00000faa <__negsi2>:
     faa:	90 95       	com	r25
     fac:	80 95       	com	r24
     fae:	70 95       	com	r23
     fb0:	61 95       	neg	r22
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <__muluhisi3>:
     fba:	2b d0       	rcall	.+86     	; 0x1012 <__umulhisi3>
     fbc:	a5 9f       	mul	r26, r21
     fbe:	90 0d       	add	r25, r0
     fc0:	b4 9f       	mul	r27, r20
     fc2:	90 0d       	add	r25, r0
     fc4:	a4 9f       	mul	r26, r20
     fc6:	80 0d       	add	r24, r0
     fc8:	91 1d       	adc	r25, r1
     fca:	11 24       	eor	r1, r1
     fcc:	08 95       	ret

00000fce <__udivmodsi4>:
     fce:	a1 e2       	ldi	r26, 0x21	; 33
     fd0:	1a 2e       	mov	r1, r26
     fd2:	aa 1b       	sub	r26, r26
     fd4:	bb 1b       	sub	r27, r27
     fd6:	fd 01       	movw	r30, r26
     fd8:	0d c0       	rjmp	.+26     	; 0xff4 <__udivmodsi4_ep>

00000fda <__udivmodsi4_loop>:
     fda:	aa 1f       	adc	r26, r26
     fdc:	bb 1f       	adc	r27, r27
     fde:	ee 1f       	adc	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	a2 17       	cp	r26, r18
     fe4:	b3 07       	cpc	r27, r19
     fe6:	e4 07       	cpc	r30, r20
     fe8:	f5 07       	cpc	r31, r21
     fea:	20 f0       	brcs	.+8      	; 0xff4 <__udivmodsi4_ep>
     fec:	a2 1b       	sub	r26, r18
     fee:	b3 0b       	sbc	r27, r19
     ff0:	e4 0b       	sbc	r30, r20
     ff2:	f5 0b       	sbc	r31, r21

00000ff4 <__udivmodsi4_ep>:
     ff4:	66 1f       	adc	r22, r22
     ff6:	77 1f       	adc	r23, r23
     ff8:	88 1f       	adc	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	1a 94       	dec	r1
     ffe:	69 f7       	brne	.-38     	; 0xfda <__udivmodsi4_loop>
    1000:	60 95       	com	r22
    1002:	70 95       	com	r23
    1004:	80 95       	com	r24
    1006:	90 95       	com	r25
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	bd 01       	movw	r22, r26
    100e:	cf 01       	movw	r24, r30
    1010:	08 95       	ret

00001012 <__umulhisi3>:
    1012:	a2 9f       	mul	r26, r18
    1014:	b0 01       	movw	r22, r0
    1016:	b3 9f       	mul	r27, r19
    1018:	c0 01       	movw	r24, r0
    101a:	a3 9f       	mul	r26, r19
    101c:	70 0d       	add	r23, r0
    101e:	81 1d       	adc	r24, r1
    1020:	11 24       	eor	r1, r1
    1022:	91 1d       	adc	r25, r1
    1024:	b2 9f       	mul	r27, r18
    1026:	70 0d       	add	r23, r0
    1028:	81 1d       	adc	r24, r1
    102a:	11 24       	eor	r1, r1
    102c:	91 1d       	adc	r25, r1
    102e:	08 95       	ret

00001030 <__ftoa_engine>:
    1030:	28 30       	cpi	r18, 0x08	; 8
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__ftoa_engine+0x6>
    1034:	27 e0       	ldi	r18, 0x07	; 7
    1036:	33 27       	eor	r19, r19
    1038:	da 01       	movw	r26, r20
    103a:	99 0f       	add	r25, r25
    103c:	31 1d       	adc	r19, r1
    103e:	87 fd       	sbrc	r24, 7
    1040:	91 60       	ori	r25, 0x01	; 1
    1042:	00 96       	adiw	r24, 0x00	; 0
    1044:	61 05       	cpc	r22, r1
    1046:	71 05       	cpc	r23, r1
    1048:	39 f4       	brne	.+14     	; 0x1058 <__ftoa_engine+0x28>
    104a:	32 60       	ori	r19, 0x02	; 2
    104c:	2e 5f       	subi	r18, 0xFE	; 254
    104e:	3d 93       	st	X+, r19
    1050:	30 e3       	ldi	r19, 0x30	; 48
    1052:	2a 95       	dec	r18
    1054:	e1 f7       	brne	.-8      	; 0x104e <__ftoa_engine+0x1e>
    1056:	08 95       	ret
    1058:	9f 3f       	cpi	r25, 0xFF	; 255
    105a:	30 f0       	brcs	.+12     	; 0x1068 <__ftoa_engine+0x38>
    105c:	80 38       	cpi	r24, 0x80	; 128
    105e:	71 05       	cpc	r23, r1
    1060:	61 05       	cpc	r22, r1
    1062:	09 f0       	breq	.+2      	; 0x1066 <__ftoa_engine+0x36>
    1064:	3c 5f       	subi	r19, 0xFC	; 252
    1066:	3c 5f       	subi	r19, 0xFC	; 252
    1068:	3d 93       	st	X+, r19
    106a:	91 30       	cpi	r25, 0x01	; 1
    106c:	08 f0       	brcs	.+2      	; 0x1070 <__ftoa_engine+0x40>
    106e:	80 68       	ori	r24, 0x80	; 128
    1070:	91 1d       	adc	r25, r1
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	1f 93       	push	r17
    1078:	0f 93       	push	r16
    107a:	ff 92       	push	r15
    107c:	ef 92       	push	r14
    107e:	19 2f       	mov	r17, r25
    1080:	98 7f       	andi	r25, 0xF8	; 248
    1082:	96 95       	lsr	r25
    1084:	e9 2f       	mov	r30, r25
    1086:	96 95       	lsr	r25
    1088:	96 95       	lsr	r25
    108a:	e9 0f       	add	r30, r25
    108c:	ff 27       	eor	r31, r31
    108e:	e2 51       	subi	r30, 0x12	; 18
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	99 27       	eor	r25, r25
    1094:	33 27       	eor	r19, r19
    1096:	ee 24       	eor	r14, r14
    1098:	ff 24       	eor	r15, r15
    109a:	a7 01       	movw	r20, r14
    109c:	e7 01       	movw	r28, r14
    109e:	05 90       	lpm	r0, Z+
    10a0:	08 94       	sec
    10a2:	07 94       	ror	r0
    10a4:	28 f4       	brcc	.+10     	; 0x10b0 <__ftoa_engine+0x80>
    10a6:	36 0f       	add	r19, r22
    10a8:	e7 1e       	adc	r14, r23
    10aa:	f8 1e       	adc	r15, r24
    10ac:	49 1f       	adc	r20, r25
    10ae:	51 1d       	adc	r21, r1
    10b0:	66 0f       	add	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	06 94       	lsr	r0
    10ba:	a1 f7       	brne	.-24     	; 0x10a4 <__ftoa_engine+0x74>
    10bc:	05 90       	lpm	r0, Z+
    10be:	07 94       	ror	r0
    10c0:	28 f4       	brcc	.+10     	; 0x10cc <__ftoa_engine+0x9c>
    10c2:	e7 0e       	add	r14, r23
    10c4:	f8 1e       	adc	r15, r24
    10c6:	49 1f       	adc	r20, r25
    10c8:	56 1f       	adc	r21, r22
    10ca:	c1 1d       	adc	r28, r1
    10cc:	77 0f       	add	r23, r23
    10ce:	88 1f       	adc	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	66 1f       	adc	r22, r22
    10d4:	06 94       	lsr	r0
    10d6:	a1 f7       	brne	.-24     	; 0x10c0 <__ftoa_engine+0x90>
    10d8:	05 90       	lpm	r0, Z+
    10da:	07 94       	ror	r0
    10dc:	28 f4       	brcc	.+10     	; 0x10e8 <__ftoa_engine+0xb8>
    10de:	f8 0e       	add	r15, r24
    10e0:	49 1f       	adc	r20, r25
    10e2:	56 1f       	adc	r21, r22
    10e4:	c7 1f       	adc	r28, r23
    10e6:	d1 1d       	adc	r29, r1
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	66 1f       	adc	r22, r22
    10ee:	77 1f       	adc	r23, r23
    10f0:	06 94       	lsr	r0
    10f2:	a1 f7       	brne	.-24     	; 0x10dc <__ftoa_engine+0xac>
    10f4:	05 90       	lpm	r0, Z+
    10f6:	07 94       	ror	r0
    10f8:	20 f4       	brcc	.+8      	; 0x1102 <__stack+0x3>
    10fa:	49 0f       	add	r20, r25
    10fc:	56 1f       	adc	r21, r22
    10fe:	c7 1f       	adc	r28, r23
    1100:	d8 1f       	adc	r29, r24
    1102:	99 0f       	add	r25, r25
    1104:	66 1f       	adc	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	06 94       	lsr	r0
    110c:	a9 f7       	brne	.-22     	; 0x10f8 <__ftoa_engine+0xc8>
    110e:	84 91       	lpm	r24, Z
    1110:	10 95       	com	r17
    1112:	17 70       	andi	r17, 0x07	; 7
    1114:	41 f0       	breq	.+16     	; 0x1126 <__stack+0x27>
    1116:	d6 95       	lsr	r29
    1118:	c7 95       	ror	r28
    111a:	57 95       	ror	r21
    111c:	47 95       	ror	r20
    111e:	f7 94       	ror	r15
    1120:	e7 94       	ror	r14
    1122:	1a 95       	dec	r17
    1124:	c1 f7       	brne	.-16     	; 0x1116 <__stack+0x17>
    1126:	e4 e9       	ldi	r30, 0x94	; 148
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	68 94       	set
    112c:	15 90       	lpm	r1, Z+
    112e:	15 91       	lpm	r17, Z+
    1130:	35 91       	lpm	r19, Z+
    1132:	65 91       	lpm	r22, Z+
    1134:	95 91       	lpm	r25, Z+
    1136:	05 90       	lpm	r0, Z+
    1138:	7f e2       	ldi	r23, 0x2F	; 47
    113a:	73 95       	inc	r23
    113c:	e1 18       	sub	r14, r1
    113e:	f1 0a       	sbc	r15, r17
    1140:	43 0b       	sbc	r20, r19
    1142:	56 0b       	sbc	r21, r22
    1144:	c9 0b       	sbc	r28, r25
    1146:	d0 09       	sbc	r29, r0
    1148:	c0 f7       	brcc	.-16     	; 0x113a <__stack+0x3b>
    114a:	e1 0c       	add	r14, r1
    114c:	f1 1e       	adc	r15, r17
    114e:	43 1f       	adc	r20, r19
    1150:	56 1f       	adc	r21, r22
    1152:	c9 1f       	adc	r28, r25
    1154:	d0 1d       	adc	r29, r0
    1156:	7e f4       	brtc	.+30     	; 0x1176 <__stack+0x77>
    1158:	70 33       	cpi	r23, 0x30	; 48
    115a:	11 f4       	brne	.+4      	; 0x1160 <__stack+0x61>
    115c:	8a 95       	dec	r24
    115e:	e6 cf       	rjmp	.-52     	; 0x112c <__stack+0x2d>
    1160:	e8 94       	clt
    1162:	01 50       	subi	r16, 0x01	; 1
    1164:	30 f0       	brcs	.+12     	; 0x1172 <__stack+0x73>
    1166:	08 0f       	add	r16, r24
    1168:	0a f4       	brpl	.+2      	; 0x116c <__stack+0x6d>
    116a:	00 27       	eor	r16, r16
    116c:	02 17       	cp	r16, r18
    116e:	08 f4       	brcc	.+2      	; 0x1172 <__stack+0x73>
    1170:	20 2f       	mov	r18, r16
    1172:	23 95       	inc	r18
    1174:	02 2f       	mov	r16, r18
    1176:	7a 33       	cpi	r23, 0x3A	; 58
    1178:	28 f0       	brcs	.+10     	; 0x1184 <__stack+0x85>
    117a:	79 e3       	ldi	r23, 0x39	; 57
    117c:	7d 93       	st	X+, r23
    117e:	2a 95       	dec	r18
    1180:	e9 f7       	brne	.-6      	; 0x117c <__stack+0x7d>
    1182:	10 c0       	rjmp	.+32     	; 0x11a4 <__stack+0xa5>
    1184:	7d 93       	st	X+, r23
    1186:	2a 95       	dec	r18
    1188:	89 f6       	brne	.-94     	; 0x112c <__stack+0x2d>
    118a:	06 94       	lsr	r0
    118c:	97 95       	ror	r25
    118e:	67 95       	ror	r22
    1190:	37 95       	ror	r19
    1192:	17 95       	ror	r17
    1194:	17 94       	ror	r1
    1196:	e1 18       	sub	r14, r1
    1198:	f1 0a       	sbc	r15, r17
    119a:	43 0b       	sbc	r20, r19
    119c:	56 0b       	sbc	r21, r22
    119e:	c9 0b       	sbc	r28, r25
    11a0:	d0 09       	sbc	r29, r0
    11a2:	98 f0       	brcs	.+38     	; 0x11ca <__stack+0xcb>
    11a4:	23 95       	inc	r18
    11a6:	7e 91       	ld	r23, -X
    11a8:	73 95       	inc	r23
    11aa:	7a 33       	cpi	r23, 0x3A	; 58
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <__stack+0xb1>
    11ae:	70 e3       	ldi	r23, 0x30	; 48
    11b0:	7c 93       	st	X, r23
    11b2:	20 13       	cpse	r18, r16
    11b4:	b8 f7       	brcc	.-18     	; 0x11a4 <__stack+0xa5>
    11b6:	7e 91       	ld	r23, -X
    11b8:	70 61       	ori	r23, 0x10	; 16
    11ba:	7d 93       	st	X+, r23
    11bc:	30 f0       	brcs	.+12     	; 0x11ca <__stack+0xcb>
    11be:	83 95       	inc	r24
    11c0:	71 e3       	ldi	r23, 0x31	; 49
    11c2:	7d 93       	st	X+, r23
    11c4:	70 e3       	ldi	r23, 0x30	; 48
    11c6:	2a 95       	dec	r18
    11c8:	e1 f7       	brne	.-8      	; 0x11c2 <__stack+0xc3>
    11ca:	11 24       	eor	r1, r1
    11cc:	ef 90       	pop	r14
    11ce:	ff 90       	pop	r15
    11d0:	0f 91       	pop	r16
    11d2:	1f 91       	pop	r17
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	99 27       	eor	r25, r25
    11da:	87 fd       	sbrc	r24, 7
    11dc:	90 95       	com	r25
    11de:	08 95       	ret

000011e0 <strnlen_P>:
    11e0:	fc 01       	movw	r30, r24
    11e2:	05 90       	lpm	r0, Z+
    11e4:	61 50       	subi	r22, 0x01	; 1
    11e6:	70 40       	sbci	r23, 0x00	; 0
    11e8:	01 10       	cpse	r0, r1
    11ea:	d8 f7       	brcc	.-10     	; 0x11e2 <strnlen_P+0x2>
    11ec:	80 95       	com	r24
    11ee:	90 95       	com	r25
    11f0:	8e 0f       	add	r24, r30
    11f2:	9f 1f       	adc	r25, r31
    11f4:	08 95       	ret

000011f6 <strcmp>:
    11f6:	fb 01       	movw	r30, r22
    11f8:	dc 01       	movw	r26, r24
    11fa:	8d 91       	ld	r24, X+
    11fc:	01 90       	ld	r0, Z+
    11fe:	80 19       	sub	r24, r0
    1200:	01 10       	cpse	r0, r1
    1202:	d9 f3       	breq	.-10     	; 0x11fa <strcmp+0x4>
    1204:	99 0b       	sbc	r25, r25
    1206:	08 95       	ret

00001208 <strnlen>:
    1208:	fc 01       	movw	r30, r24
    120a:	61 50       	subi	r22, 0x01	; 1
    120c:	70 40       	sbci	r23, 0x00	; 0
    120e:	01 90       	ld	r0, Z+
    1210:	01 10       	cpse	r0, r1
    1212:	d8 f7       	brcc	.-10     	; 0x120a <strnlen+0x2>
    1214:	80 95       	com	r24
    1216:	90 95       	com	r25
    1218:	8e 0f       	add	r24, r30
    121a:	9f 1f       	adc	r25, r31
    121c:	08 95       	ret

0000121e <__itoa_ncheck>:
    121e:	bb 27       	eor	r27, r27
    1220:	4a 30       	cpi	r20, 0x0A	; 10
    1222:	31 f4       	brne	.+12     	; 0x1230 <__itoa_ncheck+0x12>
    1224:	99 23       	and	r25, r25
    1226:	22 f4       	brpl	.+8      	; 0x1230 <__itoa_ncheck+0x12>
    1228:	bd e2       	ldi	r27, 0x2D	; 45
    122a:	90 95       	com	r25
    122c:	81 95       	neg	r24
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	01 c0       	rjmp	.+2      	; 0x1234 <__utoa_common>

00001232 <__utoa_ncheck>:
    1232:	bb 27       	eor	r27, r27

00001234 <__utoa_common>:
    1234:	fb 01       	movw	r30, r22
    1236:	55 27       	eor	r21, r21
    1238:	aa 27       	eor	r26, r26
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	aa 1f       	adc	r26, r26
    1240:	a4 17       	cp	r26, r20
    1242:	10 f0       	brcs	.+4      	; 0x1248 <__utoa_common+0x14>
    1244:	a4 1b       	sub	r26, r20
    1246:	83 95       	inc	r24
    1248:	50 51       	subi	r21, 0x10	; 16
    124a:	b9 f7       	brne	.-18     	; 0x123a <__utoa_common+0x6>
    124c:	a0 5d       	subi	r26, 0xD0	; 208
    124e:	aa 33       	cpi	r26, 0x3A	; 58
    1250:	08 f0       	brcs	.+2      	; 0x1254 <__utoa_common+0x20>
    1252:	a9 5d       	subi	r26, 0xD9	; 217
    1254:	a1 93       	st	Z+, r26
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	79 f7       	brne	.-34     	; 0x1238 <__utoa_common+0x4>
    125a:	b1 11       	cpse	r27, r1
    125c:	b1 93       	st	Z+, r27
    125e:	11 92       	st	Z+, r1
    1260:	cb 01       	movw	r24, r22
    1262:	9a c0       	rjmp	.+308    	; 0x1398 <strrev>

00001264 <fputc>:
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	fb 01       	movw	r30, r22
    126e:	23 81       	ldd	r18, Z+3	; 0x03
    1270:	21 fd       	sbrc	r18, 1
    1272:	03 c0       	rjmp	.+6      	; 0x127a <fputc+0x16>
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	9f ef       	ldi	r25, 0xFF	; 255
    1278:	2c c0       	rjmp	.+88     	; 0x12d2 <fputc+0x6e>
    127a:	22 ff       	sbrs	r18, 2
    127c:	16 c0       	rjmp	.+44     	; 0x12aa <fputc+0x46>
    127e:	46 81       	ldd	r20, Z+6	; 0x06
    1280:	57 81       	ldd	r21, Z+7	; 0x07
    1282:	24 81       	ldd	r18, Z+4	; 0x04
    1284:	35 81       	ldd	r19, Z+5	; 0x05
    1286:	42 17       	cp	r20, r18
    1288:	53 07       	cpc	r21, r19
    128a:	44 f4       	brge	.+16     	; 0x129c <fputc+0x38>
    128c:	a0 81       	ld	r26, Z
    128e:	b1 81       	ldd	r27, Z+1	; 0x01
    1290:	9d 01       	movw	r18, r26
    1292:	2f 5f       	subi	r18, 0xFF	; 255
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	31 83       	std	Z+1, r19	; 0x01
    1298:	20 83       	st	Z, r18
    129a:	8c 93       	st	X, r24
    129c:	26 81       	ldd	r18, Z+6	; 0x06
    129e:	37 81       	ldd	r19, Z+7	; 0x07
    12a0:	2f 5f       	subi	r18, 0xFF	; 255
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	37 83       	std	Z+7, r19	; 0x07
    12a6:	26 83       	std	Z+6, r18	; 0x06
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <fputc+0x6e>
    12aa:	8b 01       	movw	r16, r22
    12ac:	ec 01       	movw	r28, r24
    12ae:	fb 01       	movw	r30, r22
    12b0:	00 84       	ldd	r0, Z+8	; 0x08
    12b2:	f1 85       	ldd	r31, Z+9	; 0x09
    12b4:	e0 2d       	mov	r30, r0
    12b6:	09 95       	icall
    12b8:	89 2b       	or	r24, r25
    12ba:	e1 f6       	brne	.-72     	; 0x1274 <fputc+0x10>
    12bc:	d8 01       	movw	r26, r16
    12be:	16 96       	adiw	r26, 0x06	; 6
    12c0:	8d 91       	ld	r24, X+
    12c2:	9c 91       	ld	r25, X
    12c4:	17 97       	sbiw	r26, 0x07	; 7
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	17 96       	adiw	r26, 0x07	; 7
    12ca:	9c 93       	st	X, r25
    12cc:	8e 93       	st	-X, r24
    12ce:	16 97       	sbiw	r26, 0x06	; 6
    12d0:	ce 01       	movw	r24, r28
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	0f 91       	pop	r16
    12da:	08 95       	ret

000012dc <__ultoa_invert>:
    12dc:	fa 01       	movw	r30, r20
    12de:	aa 27       	eor	r26, r26
    12e0:	28 30       	cpi	r18, 0x08	; 8
    12e2:	51 f1       	breq	.+84     	; 0x1338 <__ultoa_invert+0x5c>
    12e4:	20 31       	cpi	r18, 0x10	; 16
    12e6:	81 f1       	breq	.+96     	; 0x1348 <__ultoa_invert+0x6c>
    12e8:	e8 94       	clt
    12ea:	6f 93       	push	r22
    12ec:	6e 7f       	andi	r22, 0xFE	; 254
    12ee:	6e 5f       	subi	r22, 0xFE	; 254
    12f0:	7f 4f       	sbci	r23, 0xFF	; 255
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	af 4f       	sbci	r26, 0xFF	; 255
    12f8:	b1 e0       	ldi	r27, 0x01	; 1
    12fa:	3e d0       	rcall	.+124    	; 0x1378 <__ultoa_invert+0x9c>
    12fc:	b4 e0       	ldi	r27, 0x04	; 4
    12fe:	3c d0       	rcall	.+120    	; 0x1378 <__ultoa_invert+0x9c>
    1300:	67 0f       	add	r22, r23
    1302:	78 1f       	adc	r23, r24
    1304:	89 1f       	adc	r24, r25
    1306:	9a 1f       	adc	r25, r26
    1308:	a1 1d       	adc	r26, r1
    130a:	68 0f       	add	r22, r24
    130c:	79 1f       	adc	r23, r25
    130e:	8a 1f       	adc	r24, r26
    1310:	91 1d       	adc	r25, r1
    1312:	a1 1d       	adc	r26, r1
    1314:	6a 0f       	add	r22, r26
    1316:	71 1d       	adc	r23, r1
    1318:	81 1d       	adc	r24, r1
    131a:	91 1d       	adc	r25, r1
    131c:	a1 1d       	adc	r26, r1
    131e:	20 d0       	rcall	.+64     	; 0x1360 <__ultoa_invert+0x84>
    1320:	09 f4       	brne	.+2      	; 0x1324 <__ultoa_invert+0x48>
    1322:	68 94       	set
    1324:	3f 91       	pop	r19
    1326:	2a e0       	ldi	r18, 0x0A	; 10
    1328:	26 9f       	mul	r18, r22
    132a:	11 24       	eor	r1, r1
    132c:	30 19       	sub	r19, r0
    132e:	30 5d       	subi	r19, 0xD0	; 208
    1330:	31 93       	st	Z+, r19
    1332:	de f6       	brtc	.-74     	; 0x12ea <__ultoa_invert+0xe>
    1334:	cf 01       	movw	r24, r30
    1336:	08 95       	ret
    1338:	46 2f       	mov	r20, r22
    133a:	47 70       	andi	r20, 0x07	; 7
    133c:	40 5d       	subi	r20, 0xD0	; 208
    133e:	41 93       	st	Z+, r20
    1340:	b3 e0       	ldi	r27, 0x03	; 3
    1342:	0f d0       	rcall	.+30     	; 0x1362 <__ultoa_invert+0x86>
    1344:	c9 f7       	brne	.-14     	; 0x1338 <__ultoa_invert+0x5c>
    1346:	f6 cf       	rjmp	.-20     	; 0x1334 <__ultoa_invert+0x58>
    1348:	46 2f       	mov	r20, r22
    134a:	4f 70       	andi	r20, 0x0F	; 15
    134c:	40 5d       	subi	r20, 0xD0	; 208
    134e:	4a 33       	cpi	r20, 0x3A	; 58
    1350:	18 f0       	brcs	.+6      	; 0x1358 <__ultoa_invert+0x7c>
    1352:	49 5d       	subi	r20, 0xD9	; 217
    1354:	31 fd       	sbrc	r19, 1
    1356:	40 52       	subi	r20, 0x20	; 32
    1358:	41 93       	st	Z+, r20
    135a:	02 d0       	rcall	.+4      	; 0x1360 <__ultoa_invert+0x84>
    135c:	a9 f7       	brne	.-22     	; 0x1348 <__ultoa_invert+0x6c>
    135e:	ea cf       	rjmp	.-44     	; 0x1334 <__ultoa_invert+0x58>
    1360:	b4 e0       	ldi	r27, 0x04	; 4
    1362:	a6 95       	lsr	r26
    1364:	97 95       	ror	r25
    1366:	87 95       	ror	r24
    1368:	77 95       	ror	r23
    136a:	67 95       	ror	r22
    136c:	ba 95       	dec	r27
    136e:	c9 f7       	brne	.-14     	; 0x1362 <__ultoa_invert+0x86>
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	61 05       	cpc	r22, r1
    1374:	71 05       	cpc	r23, r1
    1376:	08 95       	ret
    1378:	9b 01       	movw	r18, r22
    137a:	ac 01       	movw	r20, r24
    137c:	0a 2e       	mov	r0, r26
    137e:	06 94       	lsr	r0
    1380:	57 95       	ror	r21
    1382:	47 95       	ror	r20
    1384:	37 95       	ror	r19
    1386:	27 95       	ror	r18
    1388:	ba 95       	dec	r27
    138a:	c9 f7       	brne	.-14     	; 0x137e <__ultoa_invert+0xa2>
    138c:	62 0f       	add	r22, r18
    138e:	73 1f       	adc	r23, r19
    1390:	84 1f       	adc	r24, r20
    1392:	95 1f       	adc	r25, r21
    1394:	a0 1d       	adc	r26, r0
    1396:	08 95       	ret

00001398 <strrev>:
    1398:	dc 01       	movw	r26, r24
    139a:	fc 01       	movw	r30, r24
    139c:	67 2f       	mov	r22, r23
    139e:	71 91       	ld	r23, Z+
    13a0:	77 23       	and	r23, r23
    13a2:	e1 f7       	brne	.-8      	; 0x139c <strrev+0x4>
    13a4:	32 97       	sbiw	r30, 0x02	; 2
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <strrev+0x18>
    13a8:	7c 91       	ld	r23, X
    13aa:	6d 93       	st	X+, r22
    13ac:	70 83       	st	Z, r23
    13ae:	62 91       	ld	r22, -Z
    13b0:	ae 17       	cp	r26, r30
    13b2:	bf 07       	cpc	r27, r31
    13b4:	c8 f3       	brcs	.-14     	; 0x13a8 <strrev+0x10>
    13b6:	08 95       	ret

000013b8 <_exit>:
    13b8:	f8 94       	cli

000013ba <__stop_program>:
    13ba:	ff cf       	rjmp	.-2      	; 0x13ba <__stop_program>
